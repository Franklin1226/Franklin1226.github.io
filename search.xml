<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++ Primer Plus Ch1</title>
    <url>/2021/12/25/C++%20Primer%20Plus%20Ch1/</url>
    <content><![CDATA[<p>本人从今天起正式为找工作做准备，由于自己想从事后端架构师相关的工作，所以目前打算先将C++作为自己的主修语言。C++ Primer Plus这本书之前也读过，但是由于缺乏笔记记录，导致现在很多知识忘得一干二净。痛定思痛，现决定开一个专栏，记录一下自己的学习过程，同时将其作为笔记以备后用。</p>
<p>今天先从第一章开始学起，首先介绍了C++和C语言的关系。可以认为C++是在C语言的基础上发展而来的，它在C语言基础上添加了以类为代表的面向对象语言特性，以及C++模板支持的泛型编程。程序是由数据+算法组成的，传统的过程化语言（如C）都是强调的程序的算法方面，首先确定计算机应采取的操作，然后用编程语言去实现它。而OOP强调的是数据，OOP程序首先设计程序运行中需要的各种类，它们准确地表示了程序要处理的东西。有了这些类，我们就可以设计一个使用这些类的对象的程序了。面向对象语言（OOP）不同于过程性编程，他的重点没有放在任务上，而是放在概念的表示上。在引入OOP之后，C++又引入了泛型编程，类比于JAVA中的泛型编程，泛型编程指的是创建独立于类型的代码，可以使程序与不同类型的数据兼容。下面一张图展示了C++和C之间的关系。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211225151312525.png"  ><span class="image-caption">image-20211225151312525</span></p>
<p>第一章最后介绍了C++程序的常规编译流程，并介绍了市面上比较常见的编译工具和集成开发环境，这里就不再一一赘述。</p>
]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer Plus Ch3</title>
    <url>/2021/12/25/C++%20Primer%20Plus%20Ch3/</url>
    <content><![CDATA[<h1 id="第3章-处理数据"><a href="#第3章-处理数据" class="headerlink" title="第3章 处理数据"></a>第3章 处理数据</h1><h2 id="3-1-简单变量"><a href="#3-1-简单变量" class="headerlink" title="3.1 简单变量"></a>3.1 简单变量</h2><p>书中说到了一个对变量的理解，变量在声明时，程序会为其分配指定大小的空间，然后程序员可以使用变量名来找到这块空间。</p>
<h3 id="3-1-1-变量名"><a href="#3-1-1-变量名" class="headerlink" title="3.1.1 变量名"></a>3.1.1 变量名</h3><p>下面给出C++中变量的命名规则</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211226171614191.png"  ><span class="image-caption">image-20211226171614191</span></p>
<p>其中倒数第二条说的这种情况确实在阅读一些库函数源码的时候遇到过，是留给C++的标准库和编译器的实现者在编写代码时使用的，用来和普通用户代码做区分。</p>
<h3 id="3-1-2-整型"><a href="#3-1-2-整型" class="headerlink" title="3.1.2 整型"></a>3.1.2 整型</h3><p>一个比较新颖的知识点是1字节并不一定都是8位的，字节的定义是能够表示完整字符集的位数，对于ASCII码来说，8位就足够了；但汉字等其他语言字符可能需要更大空间来表示所有的字符。如Unicode，因此有的实现需要16位甚至32位的字节。</p>
<p>整数的字长在C++中不同机器上可能不尽相同，C++提供了一种灵活的标准，如下所示</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211226192138130.png"  ><span class="image-caption">image-20211226192138130</span></p>
<p>由于这种灵活的规定，C++在移植到不同的机器上面时容易产生整形字节数不一致的问题。climits头文件中定义了各种限制的符号名称，如INT_MAX为int的最大取值，CHAR_BIT为字节的位数。</p>
<h3 id="3-1-2-整型short、int、long和long-long"><a href="#3-1-2-整型short、int、long和long-long" class="headerlink" title="3.1.2 整型short、int、long和long long"></a>3.1.2 整型short、int、long和long long</h3><p>C++中独有的初始化方式</p>
<p>int wrens(432);</p>
<p>int hamburgers = {24}</p>
<p>int emus{7}</p>
<p>int rocs = {};//set rocs to 0</p>
<p>int psychics{};//set psychics to 0</p>
<p>这种采用大括号进行初始化的方式可以更好地防范类型的转换错误</p>
<p>大括号这种初始化方式可以统一任何类型变量的初始化形式</p>
<h3 id="3-1-4-无符号类型"><a href="#3-1-4-无符号类型" class="headerlink" title="3.1.4 无符号类型"></a>3.1.4 无符号类型</h3><h3 id="3-1-5-选择整型类型"><a href="#3-1-5-选择整型类型" class="headerlink" title="3.1.5 选择整型类型"></a>3.1.5 选择整型类型</h3><p>一个小知识点：int被设置为对目标计算机而言最为“自然”的长度，自然长度指的是计算机处理起来效率最高的长度。</p>
<p>还有一个经验之谈，当所表示的数据用short(16位)装不下时，应将其扩展为long而不是int，这样当程序运行在一些int位16位的机器上时也不会有问题。</p>
<h3 id="3-1-6-整型字面值"><a href="#3-1-6-整型字面值" class="headerlink" title="3.1.6 整型字面值"></a>3.1.6 整型字面值</h3><p>可以使用dec,hex,oct来控制cout输出不同进制的整数，分别为十进制，十六进制和八进制。</p>
<h3 id="3-1-7-C-如何确定常量的类型"><a href="#3-1-7-C-如何确定常量的类型" class="headerlink" title="3.1.7 C++如何确定常量的类型"></a>3.1.7 C++如何确定常量的类型</h3><p>对于十进制常量，用带符号整数int,long和long long对其进行配对；对于十六进制和八进制，用int, unsigned int, long, unsigned long, long long ,unsigned long long对其进行配对，与前者相比，加入了unsigned整数。</p>
<h3 id="3-1-8-char类型：字符和小整数"><a href="#3-1-8-char类型：字符和小整数" class="headerlink" title="3.1.8 char类型：字符和小整数"></a>3.1.8 char类型：字符和小整数</h3><p>可以使用数字转义序列和字符转义序列，但字符转义序列更具有通用性</p>
<p>数字转移序列举例：\032 \x1a分别是ASCII码26的八进制和十六进制表示</p>
<p>通用字符名允许在源代码中添加一些不同国家的字母，\u或\U打头，\u后面是8个十六进制，\U后面则是16个十六进制（感觉这里书上写错了，应该分别是4和8个十六进制位）。下面看个例子：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211226212925125.png"  ><span class="image-caption">image-20211226212925125</span></p>
<p>char在默认情况下既不是有符号也不是没有符号，有C++实现决定。</p>
<p>宽字符类型wchar_t可以表示扩展字符集，这种类型与底层的一种整数类型长度和符号属性相同，这取决于C++编译器的实现。可以通过加上前缀L来指示宽字符常量和宽字符串。</p>
<p>char16_t和char32_t是对wchar的改进，指定了特定的长度和符号，分别是16位无符号和32位无符号数，分别用前缀u和U表示。</p>
<h2 id="3-2-const限定符"><a href="#3-2-const限定符" class="headerlink" title="3.2 const限定符"></a>3.2 const限定符</h2><p>const是比#define更好地一种常量定义方式。</p>
<p>C++和C中const的区别：一是作用域规则；而是C++可以用const值来声明数组长度。</p>
<h2 id="3-3-浮点数"><a href="#3-3-浮点数" class="headerlink" title="3.3 浮点数"></a>3.3 浮点数</h2><h3 id="3-3-1-书写浮点数"><a href="#3-3-1-书写浮点数" class="headerlink" title="3.3.1 书写浮点数"></a>3.3.1 书写浮点数</h3><h3 id="3-3-2-浮点类型"><a href="#3-3-2-浮点类型" class="headerlink" title="3.3.2 浮点类型"></a>3.3.2 浮点类型</h3><h3 id="3-3-3-浮点常量"><a href="#3-3-3-浮点常量" class="headerlink" title="3.3.3 浮点常量"></a>3.3.3 浮点常量</h3><p>默认情况下，程序把浮点数常量存储为double类型，但是可以通过指定f或F后缀将常量指定为float类型，或者使用l或L将浮点常量指定为long double。</p>
<h3 id="3-3-4-浮点数的优缺点"><a href="#3-3-4-浮点数的优缺点" class="headerlink" title="3.3.4 浮点数的优缺点"></a>3.3.4 浮点数的优缺点</h3><p>浮点数会发生精度丢失的问题</p>
<h2 id="3-4-C-算术运算发"><a href="#3-4-C-算术运算发" class="headerlink" title="3.4 C++算术运算发"></a>3.4 C++算术运算发</h2><h3 id="3-4-1-运算符优先级和结合性"><a href="#3-4-1-运算符优先级和结合性" class="headerlink" title="3.4.1 运算符优先级和结合性"></a>3.4.1 运算符优先级和结合性</h3><p>和C语言差不多，没啥好讲的</p>
<h3 id="3-4-2-除法分支"><a href="#3-4-2-除法分支" class="headerlink" title="3.4.2 除法分支"></a>3.4.2 除法分支</h3><h3 id="3-4-3-求模运算"><a href="#3-4-3-求模运算" class="headerlink" title="3.4.3 求模运算"></a>3.4.3 求模运算</h3><h3 id="3-4-4-类型转换"><a href="#3-4-4-类型转换" class="headerlink" title="3.4.4 类型转换"></a>3.4.4 类型转换</h3><p>使用{}进行初始化的时候，对自动类型转换进行了限制，下面是几个例子</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228135934014.png"  ><span class="image-caption">image-20211228135934014</span></p>
<p>表达式中对short进行整型提升的时候有如下规定：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228140256232.png"  ><span class="image-caption">image-20211228140256232</span></p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228140810426.png"  ><span class="image-caption">image-20211228140810426</span></p>
<p>C++提出了自己的强制类型转换格式，如下：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228141943968.png"  ><span class="image-caption">image-20211228141943968</span></p>
<p>这样可以将基础数据类型和OOP结合的更加紧密</p>
<h3 id="3-4-5-C-11中的auto声明"><a href="#3-4-5-C-11中的auto声明" class="headerlink" title="3.4.5 C++11中的auto声明"></a>3.4.5 C++11中的auto声明</h3><p>处理复杂类型时，auto可以简化程序，如下：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228150002410.png"  ><span class="image-caption">image-20211228150002410</span></p>
<h2 id="3-5-总结"><a href="#3-5-总结" class="headerlink" title="3.5 总结"></a>3.5 总结</h2><p>基础知识，不做进一步总结。</p>
]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer Plus Ch2</title>
    <url>/2021/12/25/C++%20Primer%20Plus%20Ch2/</url>
    <content><![CDATA[<h1 id="第2章-开始学习C"><a href="#第2章-开始学习C" class="headerlink" title="第2章 开始学习C++"></a>第2章 开始学习C++</h1><h2 id="2-1-进入C"><a href="#2-1-进入C" class="headerlink" title="2.1 进入C++"></a>2.1 进入C++</h2><h3 id="2-1-1-main-函数"><a href="#2-1-1-main-函数" class="headerlink" title="2.1.1 main()函数"></a>2.1.1 main()函数</h3><p>以myfirst.cpp为例分析main函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">/ myfirst.cpp--displays a message</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>                           <span class="comment">// a PREPROCESSOR directive</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>                                    <span class="comment">// function header</span></span></span><br><span class="line"><span class="function"></span>&#123;                                             <span class="comment">// start of function body</span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;                      <span class="comment">// make definitions visible</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Come up and C++ me some time.&quot;</span>;  <span class="comment">// message</span></span><br><span class="line">    cout &lt;&lt; endl;                             <span class="comment">// start a new line</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;You won&#x27;t regret it!&quot;</span> &lt;&lt; endl;   <span class="comment">// more output</span></span><br><span class="line"><span class="comment">// If the output window closes before you can read it,</span></span><br><span class="line"><span class="comment">// add the following code:</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;Press any key to continue.&quot; &lt;&lt;endl;</span></span><br><span class="line">	<span class="comment">// cin.get();                                                   </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;                                 <span class="comment">// terminate main()</span></span><br><span class="line">&#125;              </span><br></pre></td></tr></table></figure>



<p>这里提到了一个细节，就是int main()函数的最后，可以不加return 语句，这时候编译器会默认在最后加上return 0。</p>
<h3 id="2-1-2-C-注释"><a href="#2-1-2-C-注释" class="headerlink" title="2.1.2 C++注释"></a>2.1.2 C++注释</h3><p>这里没啥好讲的，很基础。但一个好的编程习惯是使用//形式的注释，这种注释不存在/*和*/匹配的问题，所以出错的可能性很小。</p>
<h3 id="2-1-3-C-预处理器和iostream文件"><a href="#2-1-3-C-预处理器和iostream文件" class="headerlink" title="2.1.3 C++预处理器和iostream文件"></a>2.1.3 C++预处理器和iostream文件</h3><p>C++会使用一个预处理器，处理以#开头的编译指令</p>
<p>myfirst.cpp中使用了#include编译指令</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>针对这条编译指令，预处理器会将iostream文件的内容添加到程序中，这样源文件就可以使用iostream中定义的内容了。</p>
<h3 id="2-1-4-头文件名"><a href="#2-1-4-头文件名" class="headerlink" title="2.1.4 头文件名"></a>2.1.4 头文件名</h3><p>像iostream这样的文件被叫做包含文件（include file），也叫做头文件（header file），每个头文件都支持一组特定的工具。C语言的传统是使用扩展名h，但C++的用法变了，不再使用扩展名h，一些C头文件被转换为C++头文件，其文件名去掉扩展名h，并在前面加上前缀c，如math.h变成了cmath。对于纯粹的C++头文件，去掉h的头文件可以包含名称空间。</p>
<h3 id="2-1-5-名称空间"><a href="#2-1-5-名称空间" class="headerlink" title="2.1.5 名称空间"></a>2.1.5 名称空间</h3><p>虽然已经看了很多c++程序，但本人对名称空间的概念感觉理解的并不是很深入，只是知道其可以防止变量或函数的命名冲突。这在大型项目中尤其重要。至于如何去定义不同的命名空间，现在还不得而知。</p>
<h3 id="2-1-6-使用cout进行C-输出"><a href="#2-1-6-使用cout进行C-输出" class="headerlink" title="2.1.6 使用cout进行C++输出"></a>2.1.6 使用cout进行C++输出</h3><p>这里提到了\n和endl的区别，endl会立刻刷新输出（立即显示在屏幕上），而\n不能提供这样的保证。</p>
<h3 id="2-1-7-C-源代码的格式化"><a href="#2-1-7-C-源代码的格式化" class="headerlink" title="2.1.7 C++源代码的格式化"></a>2.1.7 C++源代码的格式化</h3><p>这一部分讲了一些代码编写的格式规范问题，不做过多介绍。</p>
<h2 id="2-2-C-语句"><a href="#2-2-C-语句" class="headerlink" title="2.2 C++语句"></a>2.2 C++语句</h2><h3 id="2-2-1-声明语句和变量"><a href="#2-2-1-声明语句和变量" class="headerlink" title="2.2.1 声明语句和变量"></a>2.2.1 声明语句和变量</h3><p>没啥好讲的，变量在使用前必须先声明。定义声明和引用声明的区别是，定义声明为变量分配空间。</p>
<h3 id="2-2-2-赋值语句"><a href="#2-2-2-赋值语句" class="headerlink" title="2.2.2 赋值语句"></a>2.2.2 赋值语句</h3><p>连续赋值语句从右向左执行。</p>
<h3 id="2-2-3-cout的新花样"><a href="#2-2-3-cout的新花样" class="headerlink" title="2.2.3 cout的新花样"></a>2.2.3 cout的新花样</h3><p>cout能根据&lt;&lt;后跟着的数据类型调整输出行为，本质上是运算符的重载。</p>
<h2 id="2-3-其他C-语句"><a href="#2-3-其他C-语句" class="headerlink" title="2.3 其他C++语句"></a>2.3 其他C++语句</h2><h3 id="2-3-1-使用cin"><a href="#2-3-1-使用cin" class="headerlink" title="2.3.1 使用cin"></a>2.3.1 使用cin</h3><p>也是很基础的东西，不再赘述</p>
<h3 id="2-3-2-使用cout进行拼接"><a href="#2-3-2-使用cout进行拼接" class="headerlink" title="2.3.2 使用cout进行拼接"></a>2.3.2 使用cout进行拼接</h3><p>介绍了cout可以使用&lt;&lt;进行拼接的特性，也是基本特性，不再赘述。</p>
<h3 id="2-3-3-类简介"><a href="#2-3-3-类简介" class="headerlink" title="2.3.3 类简介"></a>2.3.3 类简介</h3><p>讲了面向对象语言中对类的一些基本认识。</p>
<h2 id="2-4-函数"><a href="#2-4-函数" class="headerlink" title="2.4 函数"></a>2.4 函数</h2><h3 id="2-4-1-使用有返回值的函数"><a href="#2-4-1-使用有返回值的函数" class="headerlink" title="2.4.1 使用有返回值的函数"></a>2.4.1 使用有返回值的函数</h3><h3 id="2-4-2-函数变体"><a href="#2-4-2-函数变体" class="headerlink" title="2.4.2 函数变体"></a>2.4.2 函数变体</h3><p>在有些语言中，有返回值的函数被称为函数，没有返回值的函数被称为过程或子过程。但C++中，这两种变体都被成为函数。</p>
<h3 id="2-4-3-用户定义的函数"><a href="#2-4-3-用户定义的函数" class="headerlink" title="2.4.3 用户定义的函数"></a>2.4.3 用户定义的函数</h3><p>main函数的返回值返回给了谁？</p>
<p>答：返回给了操作系统，在一些情况下，命令行窗口（cmd）接受main函数的返回值，用来判断程序的运行情况。默认正常退出返回0.</p>
<h3 id="2-4-4-用户定义的有返回值的函数"><a href="#2-4-4-用户定义的有返回值的函数" class="headerlink" title="2.4.4 用户定义的有返回值的函数"></a>2.4.4 用户定义的有返回值的函数</h3><h3 id="2-4-5-在多函数程序中使用using编译指令"><a href="#2-4-5-在多函数程序中使用using编译指令" class="headerlink" title="2.4.5 在多函数程序中使用using编译指令"></a>2.4.5 在多函数程序中使用using编译指令</h3><p>using namespace std;这条编译指令可以选择合适大小的作用域，在作用域外的程序部分不能使用std名称空间中定义的元素。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211226163940797.png"  ><span class="image-caption">image-20211226163940797</span></p>
]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>失眠随笔</title>
    <url>/2021/12/25/Essay1/</url>
    <content><![CDATA[<p>现在是12月25号的凌晨3：15，已经连续两天半夜失眠了。反思最近的生活，一直陷在一种浑浑噩噩的状态中，白天效率低下，到了夜里又总会胡思乱想，为自己的不思进取感到焦虑。时长怀念18年的那个大二，那时候的生活总是可控的，我很喜欢那种一切井井有条的感觉。但不知道什么时候开始，生活开始脱轨，对工作和学习也失去了热情，甚至产生了逃避的心理。我不知道这种局面如何破局，只能寄希望于某个奇妙的节点，自己能够重燃对生活的热情吧。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2021/12/20/HW%20shell/</url>
    <content><![CDATA[<h1 id="HW-shell"><a href="#HW-shell" class="headerlink" title="HW: shell"></a>HW: shell</h1><p>这一个作业要求我们写一个简单版的shell程序，可以识别简单的命令行指令。读了xv6相关的源码之后，实现思路豁然开朗。</p>
<h2 id="实现简单指令"><a href="#实现简单指令" class="headerlink" title="实现简单指令"></a>实现简单指令</h2><p>要求我们自己编写的shell程序能够实现例如ls之类的简单命令。参照xv6中简单指令的实现：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211220102214118.png"  ><span class="image-caption">image-20211220102214118</span></p>
<p>可以看到，利用exev函数可以执行指定的可执行文件，而shell命令ls等都有自己对应的可执行文件，这些shell命令的可执行文件位于/bin/和/usr/bin两个文件夹中，所以使命令行直接执行ls命令，需要在程序中补全完整执行路径。</p>
<p>我自己的实现代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">strstr</span>(ecmd-&gt;argv[<span class="number">0</span>], <span class="string">&quot;/bin/&quot;</span>) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">  <span class="keyword">char</span> *result = <span class="built_in">malloc</span>(<span class="number">5</span> + <span class="built_in">strlen</span>(ecmd-&gt;argv[<span class="number">0</span>]) + <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(result, <span class="string">&quot;/bin/&quot;</span>);</span><br><span class="line">  <span class="built_in">strcat</span>(result, ecmd-&gt;argv[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">free</span>(ecmd-&gt;argv[<span class="number">0</span>]);</span><br><span class="line">  ecmd-&gt;argv[<span class="number">0</span>] = result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(execv(ecmd-&gt;argv[<span class="number">0</span>], ecmd-&gt;argv) == <span class="number">-1</span>) &#123;</span><br><span class="line">  <span class="keyword">char</span> *result = <span class="built_in">malloc</span>(<span class="number">4</span> + <span class="built_in">strlen</span>(ecmd-&gt;argv[<span class="number">0</span>]) + <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(result, <span class="string">&quot;/usr&quot;</span>);</span><br><span class="line">  <span class="built_in">strcat</span>(result, ecmd-&gt;argv[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">free</span>(ecmd-&gt;argv[<span class="number">0</span>]);</span><br><span class="line">  ecmd-&gt;argv[<span class="number">0</span>] = result;</span><br><span class="line">  <span class="keyword">if</span>(execv(ecmd-&gt;argv[<span class="number">0</span>], ecmd-&gt;argv) == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;exec %s failed\n&quot;</span>, ecmd-&gt;argv[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="I-O重定向"><a href="#I-O重定向" class="headerlink" title="I/O重定向"></a>I/O重定向</h2><p>默认情况下程序从标准输入中读取数据，并将输出写入到标准输出中，但通过重定向命令可以重新定向程序的输入和输出。我们先看一下xv6中重定向命令的实现代码：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211220103207119.png"  ><span class="image-caption">image-20211220103207119</span></p>
<p>close(rcmd-&gt;fd)先将fd与标准输入和标准输出解绑，然后将fd与指定文件rcmd-&gt;file重新绑定，以实现重定向目的。我的实现代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">close(rcmd-&gt;fd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(open(rcmd-&gt;file, rcmd-&gt;flags, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;open %s failed\n&quot;</span>, rcmd-&gt;file);</span><br><span class="line">  _exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">runcmd(rcmd-&gt;cmd);</span><br></pre></td></tr></table></figure>

<p>注意，open函数一定要指定mode参数，即open函数的第三个参数，因为创建新文件的时候一定要指定之后用户对该文件的操作权限，如果不指定这个参数，创建了文件之后，下次涉及该文件的操作都没有合法权限。</p>
<h2 id="管道命令的实现"><a href="#管道命令的实现" class="headerlink" title="管道命令的实现"></a>管道命令的实现</h2><p>通过这个作业，我也是比较透彻的理解了这个强大的功能。我们可以把管道想成是两个程序（进程）之间的单向通道。如命令ls | sort，ls程序将自己的输出通过管道输出到管道写端口中，sort程序从管道另一端的读端口读取数据。我们先看一下xv6中管道命令的实现</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211220105052699.png"  ><span class="image-caption">image-20211220105052699</span></p>
<p>注意，这里每个线程执行了close(p[0]])和close(p[1])这是因为管道的读是阻塞的，read操作会一直等待，直到管道有了新数据或者绑定到管道写端口的描述符都已经关闭。如果不执行close(p[0])操作，就会始终有描述符绑定在管道的写端口，导致read永远结束不了。下面是我的实现代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(pipe(p) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pipe&quot;</span>);</span><br><span class="line">  _exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(fork() == <span class="number">0</span>) &#123;</span><br><span class="line">  close(<span class="number">1</span>);</span><br><span class="line">  dup(p[<span class="number">1</span>]);</span><br><span class="line">  close(p[<span class="number">0</span>]);</span><br><span class="line">  close(p[<span class="number">1</span>]);</span><br><span class="line">  runcmd(pcmd-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(fork() == <span class="number">0</span>) &#123;</span><br><span class="line">  close(<span class="number">0</span>);</span><br><span class="line">  dup(p[<span class="number">0</span>]);</span><br><span class="line">  close(p[<span class="number">0</span>]);</span><br><span class="line">  close(p[<span class="number">1</span>]);</span><br><span class="line">  runcmd(pcmd-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> wstatus = <span class="number">0</span>;</span><br><span class="line">close(p[<span class="number">0</span>]);</span><br><span class="line">close(p[<span class="number">1</span>]);</span><br><span class="line">wait(&amp;wstatus);</span><br><span class="line">wait(&amp;wstatus);</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/12/20/Lab1%20Booting%20a%20PC/</url>
    <content><![CDATA[<h1 id="Lab-1-Booting-a-PC"><a href="#Lab-1-Booting-a-PC" class="headerlink" title="Lab 1: Booting a PC"></a>Lab 1: Booting a PC</h1><p>实验一主要分为三个部分，第一部分主要是熟悉x86汇编语言，QEMU x86模拟器以及电脑的开机引导程序；第二部分用于检测我们6.828内核的引导加载程序；最后在第三部分我们会深入探究6.828内核的初始模板，JOS。</p>
<p>我们可以使用make grade指令来测试我们的解决方案。</p>
<h2 id="Part-1-PC-Bootstrap"><a href="#Part-1-PC-Bootstrap" class="headerlink" title="Part 1: PC Bootstrap"></a>Part 1: PC Bootstrap</h2><p>这一部分主要介绍了x86汇编语言以及PC的开机引导程序，并学者开始使用QEMU及其调试工具。</p>
<h3 id="Simulating-the-x86"><a href="#Simulating-the-x86" class="headerlink" title="Simulating the x86"></a>Simulating the x86</h3><p>我们将使用QEMU模拟器，并在其上开发我们的操作系统，而不是在一个真实的物理机上面去调试我们的代码。</p>
<p>我们在lab目录下执行make指令就可以构建一个最小的6.828开机引导程序和内核。</p>
<p>在编译完成我们的引导程序和内核之后，我们就可以运行QEMU了，如下图。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211211084946927.png"  ><span class="image-caption">image-20211211084946927</span></p>
<h3 id="The-PC’s-Physical-Address-Space"><a href="#The-PC’s-Physical-Address-Space" class="headerlink" title="The PC’s Physical Address Space"></a>The PC’s Physical Address Space</h3><p>早期内存空间只有1MB的大小。内存空间的开始部分被记作“Low Memory”，是一块（RAM）。“Low Memory”后面紧跟着一片为硬件预留的空间（例如媒体显存和NVM固件）。预留空间中最重要的部分就是BIOS，负责执行基础的系统初始化工作，例如激活video card并检查安装的内存容量。初始化工作完成后，BIOS从软盘、硬盘、CD-ROM或网络等适当位置加载操作系统，并将机器的控制权交给操作系统。</p>
<p>之后Intel将内存空间做的越来越大，但PC架构仍然保留了之前的1MB的低地址空间的布局，以保证与现有软件向后兼容。</p>
<h3 id="The-ROM-BIOS"><a href="#The-ROM-BIOS" class="headerlink" title="The ROM BIOS"></a>The ROM BIOS</h3><p>在这一部分实验中，我们将使用QEMU的调试工具来研究IA-32兼容的计算机如何启动。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211211095552785.png"  ><span class="image-caption">image-20211211095552785</span></p>
<p>[f000:fff0] 0xffff0: ljmp $0xf000,$0xe05b</p>
<p>从上述第一条指令，我们可以得出：</p>
<ul>
<li>IBM PC 在物理地址 0x000ffff0 处开始执行，该地址位于为 ROM BIOS 保留的 64KB 区域的最顶部</li>
<li>PC 以 CS = 0xf000 和 IP = 0xfff0 开始执行，其中CS是代码段寄存器，IP是指令指针寄存器（相当于偏移地址）</li>
<li>第一条被执行的指令是jmp指令，代码跳转到CS=0xf000,IP=0xe05b</li>
</ul>
<h3 id="Exercise-2"><a href="#Exercise-2" class="headerlink" title="Exercise 2:"></a>Exercise 2:</h3><p>逐条分析BIOS内部指令，探究BIOS所作的工作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 0xffff0:  ljmp $0xf000, $0xe05b </span><br></pre></td></tr></table></figure>

<p>这是一条跳转指令，将代码切换到0xfe05b处执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2. [f000:e05b]0xfe05b: cmpl $0x0, $cs:0x6ac8</span><br></pre></td></tr></table></figure>

<p>把立即数0x0和$cs:0x6ac8所表示的内存地址处存放的值进行比较</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3. 0xfe062:  jne  0xfd2e1</span><br></pre></td></tr></table></figure>

<p>jne指令：如果ZF标志位为0，则跳转，否则顺序执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4. 0xfe066:  xor  %dx, %dx</span><br></pre></td></tr></table></figure>

<p>可以看到该指令的地址是0xfe066，说明上条指令并未跳转，该指令将dx寄存器清零。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5. 0xfe068:  mov  %dx %ss</span><br><span class="line">6. 0xfe06a:  mov  $0x7000, %esp</span><br><span class="line">7. 0xfe070:  mov  $0xf34d2, %edx</span><br><span class="line">8. 0xfe076:  jmp  0xfd15c</span><br><span class="line">9. 0xfd15c:  mov  %eax, %ecx</span><br></pre></td></tr></table></figure>

<p>上述指令用来设置一系列寄存器的值，具体目的不明。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10. 0xfd15f:  cli</span><br></pre></td></tr></table></figure>

<p>这条指令是<em><strong>关闭中断指令</strong></em>，因为启动时的操作都很关键，不能被其他事件中断，关闭中断指令可以屏蔽那些可以屏蔽的中断，比如大部分的硬件中断。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">11. 0xfd160:  cld</span><br></pre></td></tr></table></figure>

<p><em><strong>串操作复位指令</strong></em>，将方向标志位DF置为0，每进行一次串操作，操作数地址+1、+2、+4（分别对应字节、字、双字操作数）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">12. 0xfd161:  mov  $0x8f, %eax</span><br><span class="line">13. 0xfd167:  out  %al, $0x70</span><br><span class="line">14. 0xfd169:  in  $0x71, %al</span><br></pre></td></tr></table></figure>

<p> 这三个操作中涉及到两个新的指令out, in。这两个操作是用于操作IO端口的。这种IO端口的操作我们后面会经常接触到，这里大致说下。</p>
<p>　 CPU与外部设备通讯时，通常是通过访问，修改设备控制器中的寄存器来实现的。那么这些位于设备控制器当中的寄存器也叫做<strong>IO端口</strong>。为了方便管理，80x86CPU采用IO端口单独编址的方式，即所有设备的端口都被命名到一个IO端口地址空间中。这个空间是独立于内存地址空间的。所以必须采用和访问内存的指令不一样的指令来访问端口。</p>
<p>所以这里引入in，out操作：</p>
<p>　    **in %al, PortAddress   把端口地址为PortAddress的端口中的值读入寄存器al中 **</p>
<p>　   <strong>out PortAddres,%al   向端口地址为PortAddress的端口写入值，值为al寄存器中的值</strong></p>
<p>标准规定端口操作必须要用al寄存器作为缓冲。</p>
<p>那么这三条命令就是要操作端口0x70，0x71，它们对应的是什么设备呢？根据下面的链接中所提供的清单（这个连接之后会经常用到，建议大家收藏）：<a href="http://bochs.sourceforge.net/techspec/PORTS.LST">http://bochs.sourceforge.net/techspec/PORTS.LST</a></p>
<p>　 我们知道了，0x70端口和0x71端口是用于控制系统中一个叫做CMOS的设备，这个设备是一个低功耗的存储设备，它可以用于在计算机关闭时存储一些信息，它是由独立的电池供电的。这个链接有详细介绍<a href="http://wiki.osdev.org/CMOS">http://wiki.osdev.org/CMOS</a></p>
<p>　 这个CMOS中可以控制跟PC相关的多个功能，其中最重要的就是<strong>时钟设备（Real Time Clock）</strong>的 ，它还可以控制是否**响应不可屏蔽中断NMI(Non-Maskable Interrupt)**。</p>
<p>　 操作CMOS存储器中的内容需要两个端口，一个是0x70另一个就是0x71。其中0x70可以叫做索引寄存器，<strong>这个8位寄存器的最高位是不可屏蔽中断(NMI)使能位。如果你把这个位置1，则NMI不会被响应。低7位用于指定CMOS存储器中的存储单元地址</strong>，所以如果你想访问第1号存储单元，并且在访问时，我要使能NMI，那么你就应该向端口0x70里面送入0b10000001 = 0x81。</p>
<p>　 即mov $0x81, %al</p>
<p>​         out %al, 0x70</p>
<p>　  然后对于这个地址单元的操作，比如读或者写就可以由0x71端口完成，比如你现在想从1号存储单元里面读出它的值，在完成上面的两条指令后，就可以输入这条指令</p>
<p>　　in $0x71, %al </p>
<p>　　再回到我们的系统，这三条指令可以看出，它首先关闭了NMI中断，并且要访问存储单元0xF的值，并且把值读到al中，但是在后面我们发现这个值并没有被利用，所以可以认为<strong>这三条指令是用来关闭NMI中断的。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">15. 0xfd16b:  in  $0x92, %al</span><br><span class="line">16. 0xfd16d:  or  $0x2, %al</span><br><span class="line">17. 0xfd16f:  out  %al, $0x92</span><br></pre></td></tr></table></figure>

<p>这三步操作又是在控制端口，此时被控制的端口号为0x92，通过上面那个链接 <a href="http://bochs.sourceforge.net/techspec/PORTS.LST">http://bochs.sourceforge.net/techspec/PORTS.LST</a></p>
<p>　　我们可以查看到，它控制的是 PS/2系统控制端口A，而第16，17步的操作明显是在把这个端口的1号bit置为1。这个端口的bit1的功能是</p>
<p>　　　　bit 1= 1 indicates A20 active</p>
<p>　　 即A20位，即第21个地址线被使能，了解实模式和保护模式的同学肯定清楚，如果A20地址线被激活，那么系统工作在保护模式下。但是在之后的boot loader程序中，计算机首先要工作在实模式下啊。所以这里的这个操作应该是去测试可用内存空间。在boot loader之前，它肯定还会转换回实模式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">18. 0xfd171:  lidtw  %cs:0x6ab8</span><br></pre></td></tr></table></figure>

<p><em><strong>lidt指令</strong></em>：加载中断向量表寄存器(IDTR)。这个指令会把从地址0xf6ab8起始的后面6个字节的数据读入到中断向量表寄存器(IDTR)中。中断是操作系统中非常重要的一部分，有了中断操作系统才能真正实现进程。每一种中断都有自己对应的中断处理程序，那么这个中断的处理程序的首地址就叫做这个中断的中断向量。中断向量表自然是存放所有中断向量的表了。关于中断向量表的介绍，大家可以戳这个链接 <a href="http://wiki.osdev.org/Interrupt_Descriptor_Table">http://wiki.osdev.org/Interrupt_Descriptor_Table</a> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">19. 0xfd177:  lgdtw  %cs:0x6a74 </span><br></pre></td></tr></table></figure>

<p>把从0xf6a74为起始地址处的6个字节的值加载到全局描述符表格寄存器中GDTR中。这个表实现保护模式非常重要的一部分，我们在介绍boot loader时会具体介绍它。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">20. 0xfd17d:  mov  %cr0, %eax</span><br><span class="line">21. 0xfd180:  or  $0x1, %eax</span><br><span class="line">22. 0xfd184:  mov  %eax, %cr0</span><br></pre></td></tr></table></figure>

<p>计算机中包含CR0~CR3四个控制寄存器，用来控制和确定处理器的操作模式。其中这三个语句的操作明显是要把CR0寄存器的最低位(0bit)置1。CR0寄存器的0bit是PE位，启动保护位，当该位被置1，代表开启了保护模式。但是这里出现了问题，我们刚刚说过BIOS是工作在实模式之下，后面的boot loader开始的时候也是工作在实模式下，所以这里把它切换为保护模式，显然是自相矛盾。所以只能推测它在检测是否机器能工作在保护模式下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">23. 0xfd187:  ljmpl  $0x8, $0xfd18f</span><br><span class="line">24. 0xfd18f:   mov  $0x10, %eax</span><br><span class="line">25. 0xfd194:  mov  %eax, %ds</span><br><span class="line">26. 0xfd196:  mov  %eax, %es</span><br><span class="line">27. 0xfd198:  mov  %eax, %ss</span><br><span class="line">28. 0xfd19a:  mov  %eax, %fs</span><br><span class="line">29. 0xfd19c:  mov  %eax, %gs</span><br></pre></td></tr></table></figure>

<p>修改这些寄存器的值。这些寄存器都是段寄存器。大家可以戳这个链接看一下具体介绍 <a href="http://www.eecg.toronto.edu/~amza/[www.mindsec.com/files/x86regs.html](http://www.mindsec.com/files/x86regs.html)">http://www.eecg.toronto.edu/~amza/[www.mindsec.com/files/x86regs.html](http://www.mindsec.com/files/x86regs.html)</a></p>
<p>　　 这里的23~29步之所以这么做是按照规定来的，<a href="https://en.wikibooks.org/wiki/X86_Assembly/Global_Descriptor_Table%E9%93%BE%E6%8E%A5%E4%B8%AD%E6%8C%87%E5%87%BA%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%88%9A%E5%88%9A%E5%8A%A0%E8%BD%BD%E5%AE%8CGDTR%E5%AF%84%E5%AD%98%E5%99%A8%E6%88%91%E4%BB%AC%E5%BF%85%E9%A1%BB%E8%A6%81%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BD%E6%89%80%E6%9C%89%E7%9A%84%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E5%80%BC%EF%BC%8C%E8%80%8C%E5%85%B6%E4%B8%ADCS%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%BF%85%E9%A1%BB%E9%80%9A%E8%BF%87%E9%95%BF%E8%B7%B3%E8%BD%AC%E6%8C%87%E4%BB%A4%EF%BC%8C%E5%8D%B323%E5%8F%B7%E6%8C%87%E4%BB%A4%E6%9D%A5%E8%BF%9B%E8%A1%8C%E5%8A%A0%E8%BD%BD%E3%80%82%E6%89%80%E4%BB%A5%E8%BF%99%E4%BA%9B%E6%AD%A5%E9%AA%A4%E6%98%AF%E5%9C%A8%E7%AC%AC19%E6%AD%A5%E5%AE%8C%E6%88%90%E5%90%8E%E5%BF%85%E9%A1%BB%E8%A6%81%E5%81%9A%E7%9A%84%E3%80%82%E8%BF%99%E6%A0%B7%E6%89%8D%E8%83%BD%E6%98%AFGDTR%E7%9A%84%E5%80%BC%E7%94%9F%E6%95%88%E3%80%82">https://en.wikibooks.org/wiki/X86_Assembly/Global_Descriptor_Table链接中指出，如果刚刚加载完GDTR寄存器我们必须要重新加载所有的段寄存器的值，而其中CS段寄存器必须通过长跳转指令，即23号指令来进行加载。所以这些步骤是在第19步完成后必须要做的。这样才能是GDTR的值生效。</a></p>
<p>综上，我们可以看到BIOS的操作就是在控制，初始化，检测各种底层的设备，比如时钟，GDTR寄存器。以及设置中断向量表。这都和Lab 1 Part 1.2最后两段说的一样。但是作为PC启动后运行的第一段程序，<strong>它最重要的功能是把操作系统从磁盘中导入内存，然后再把控制权转交给操作系统。</strong>所以BIOS在运行的最后会去检测可以从当前系统的哪个设备中找到操作系统，通常来说是我们的磁盘。也有可能是U盘等等。当BIOS确定了，操作系统位于磁盘中，那么它就会把这个磁盘的第一个扇区，通常把它叫做启动区（boot sector）先加载到内存中，这个启动区中包括一个非常重要的程序–<strong>boot loader，</strong>它会负责完成整个操作系统从磁盘导入内存的工作，以及一些其他的非常重要的配置工作。最后操作系统才会开始运行。</p>
<p>　　可见PC启动后的运行顺序为 BIOS –&gt; boot loader –&gt; 操作系统内核</p>
<h2 id="Part-2-The-Boot-Loader"><a href="#Part-2-The-Boot-Loader" class="headerlink" title="Part 2: The Boot Loader"></a>Part 2: The Boot Loader</h2><p>这一部分说是让你逐行分析汇编源码，但我认为作为学习者，不用一上来就试图把所有见到的源码和术语全部搞到，这样往往容易使眼光局限在细节处，而失去了全局观。</p>
<h3 id="Exercise-3"><a href="#Exercise-3" class="headerlink" title="Exercise 3"></a>Exercise 3</h3><ul>
<li><p>At what point does the processor start executing 32-bit code? What exactly causes the switch from 16- to 32-bit mode?{处理器从何时开始执行32位代码？究竟是什么导致了从16位模式到32位模式的转换?）<br>答：在ljmp $PROT_MODE_CSEG, $protcseg（截图三中间）处开始执行32位代码。应该是经过64与60端口的控制，加载完GDT表后，CRO的bit0位为1，此时机器已处于保护模式，故处理器从16位模式转为32位模式。</p>
</li>
<li><p>What is the last instruction of the boot loader executed, and what is the first instruction of the kernel it just loaded?（引导加载程序执行的最后一条指令是什么?它刚刚加载完的内核的第一条指令是什么?）<br>答：引导加载程序的最后一条指令是boot/main.c中bootmain函数最后的((void (*)(void)) (ELFHDR-&gt;e_entry))(); 这个第一条指令位于/kern/entry.S文件中，第一句 movw $0x1234, 0x472</p>
</li>
<li><p>Where is the first instruction of the kernel?（内核的第一条指令在哪里?）<br>答：位于/kern/entry.S文件中</p>
</li>
<li><p>How does the boot loader decide how many sectors it must read in order to fetch the entire kernel from disk? Where does it find this information?（引导加载程序如何决定必须读取多少扇区才能从磁盘获取整个内核?它在哪里找到这些信息?）<br>答：通过ELF program headers决定，他在操作系统内核映像文件的ELF头部信息里找到。</p>
<h3 id="Loading-the-Kernel"><a href="#Loading-the-Kernel" class="headerlink" title="Loading the Kernel"></a>Loading the Kernel</h3><p>ELF是将二进制形式的.o文件进行组合，表示”Executable and Linkable Format”。我们只需要了解elf文件的这三个部分即可。</p>
<ul>
<li><p><code>.text</code>: The program’s executable instructions.</p>
</li>
<li><p><code>.rodata</code>: Read-only data, such as ASCII string constants produced by the C compiler. (We will not bother setting up the hardware to prohibit writing, however.)</p>
</li>
<li><p><code>.data</code>: The data section holds the program’s initialized data, such as global variables declared with initializers like <code>int x = 5;</code>.</p>
</li>
</ul>
</li>
</ul>
<h2 id="Part-3：-The-Kernel"><a href="#Part-3：-The-Kernel" class="headerlink" title="Part 3： The Kernel"></a>Part 3： The Kernel</h2><p>这里主要介绍了Kernel中虚拟地址到物理地址的映射机制，并设置了Exercise 7来探究如果虚拟地址映射失效后，代码的出错现象。实验相对来说比较简单，这里不再赘述</p>
<h3 id="Exercise8"><a href="#Exercise8" class="headerlink" title="Exercise8"></a>Exercise8</h3><p>如图所示：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211214172950353.png"  ><span class="image-caption">image-20211214172950353</span></p>
<h3 id="The-Stack"><a href="#The-Stack" class="headerlink" title="The Stack"></a>The Stack</h3><h3 id="Exercise-9"><a href="#Exercise-9" class="headerlink" title="Exercise 9"></a>Exercise 9</h3><p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211214173357817.png"  ><span class="image-caption">image-20211214173357817</span></p>
<p>可以看到movl指令将栈顶地址赋给esp寄存器，在下面的.data数据段中，从标签bootstack开始，使用.space指令为栈分配了KSTKSIZE大小的空间。由于栈是向低空间生长的，所以初始时栈顶位于bootstacktop处，朝bootstack方向压入数据。</p>
<h3 id="Exercise11"><a href="#Exercise11" class="headerlink" title="Exercise11"></a>Exercise11</h3><p>这部分联系要求我们实现类似于gdb中的调试命令backtrace(bt)。</p>
<p>题目要求打印调用栈的信息，包括ebp和eip寄存器的值、输入参数的值等。</p>
<ol>
<li><p>按照提示，我们首先可以调用read_ebp函数来获取当前ebp寄存器的值。ebp寄存器的值实际上是一个指针，指向当前函数的栈帧的底部（而esp寄存器指向当前函数的栈顶）。我们可以把整个调用栈看做一个数组，其中每个元素均为4字节的整数，并以ebp指针的值为数组起始地址，那么ebp[1]存储的就是函数返回地址，也就是题目中要求的eip的值，ebp[2]以后存储的是输入参数的值。由于题目要求打印5个输入参数，因此需要获取ebp[2]～ebp[6]的值。这样第一条栈信息便可打印出来。</p>
</li>
<li><p>那么怎么打印下一条栈信息呢？还得从ebp入手。当前ebp指针存储的恰好是调用者的ebp寄存器的值，因此当前ebp指针又可以看做是一个链表头，我们通过链表头就可以遍历整个链表。举个例子：假设有A、B、C三个函数，A调用B，B调用C，每个函数都对应有一个栈帧，栈帧的底部地址均存储在当时的ebp寄存器中，不妨记为a_ebp, b_ebp和c_ebp，那么将有c_ebp -&gt; b_ebp -&gt; a_ebp，用程序语言表示就是：<code>a_ebp = (uint32_t *)*b_ebp</code>和<code>b_ebp = (uint32_t *)*c_ebp</code>。</p>
</li>
<li><p>还有一个问题：怎么知道遍历何时结束呢？题目中提示可以参考<code>kern/entry.S</code>，于是我打开此文件，果然找到了答案：内核初始化时会将ebp设置为0，因此当我们检查到ebp为0后就应该结束了。</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Clear the frame pointer register (EBP)</span><br><span class="line"># so that once we get into debugging C code,</span><br><span class="line"># stack backtraces will be terminated properly.</span><br><span class="line">movl	$0x0,%ebp			# nuke frame pointer</span><br></pre></td></tr></table></figure>



<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>这道练习题主要考察我们对函数调用过程中，栈的行为的理解。当要调用一个函数时，栈首先压入函数执行所需的参数，然后压入返回地址，最后压入调用者栈帧的ebp值，然后将esp的值赋给ebp。</p>
<h3 id="Exercise12"><a href="#Exercise12" class="headerlink" title="Exercise12"></a>Exercise12</h3><p>进一步为backtrace添加命令地址所在文件名，行号，函数名的功能。</p>
<p>问题1：_ _ STAB_ *来自什么地方？</p>
<p>根据讲义中的提示，我们去查看kern/kern.ld文件，可以看到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.stab : &#123;</span><br><span class="line">	PROVIDE(__STAB_BEGIN__ = .);</span><br><span class="line">	*(.stab);</span><br><span class="line">	PROVIDE(__STAB_END__ = .);</span><br><span class="line">	BYTE(0)		/* Force the linker to allocate space</span><br><span class="line">			   for this section */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.stabstr : &#123;</span><br><span class="line">	PROVIDE(__STABSTR_BEGIN__ = .);</span><br><span class="line">	*(.stabstr);</span><br><span class="line">	PROVIDE(__STABSTR_END__ = .);</span><br><span class="line">	BYTE(0)		/* Force the linker to allocate space</span><br><span class="line">			   for this section */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>__STAB_BEGIN_, __STAB_END_, __STABSTR_BEGIN_, _ _STABSTR_ 分别代表.stab和.stabstr这两个段开始和结束的地址。</p>
<p>问题2：确定符号表是否加载到内存中？</p>
<p>执行objdump -h obj/kern/kernel</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211215201925065.png"  ><span class="image-caption">image-20211215201925065</span></p>
<p>输入指令objdump -G obj/kern/kernel，可以看到所有的stab的信息</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211215202728390.png"  ><span class="image-caption">image-20211215202728390</span></p>
<p>可以看到.stabstr加载地址为0xf0105dfd</p>
<p>输入指令x/8s 0xf0105dfd</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211215202537592.png"  ><span class="image-caption">image-20211215202537592</span></p>
<p>与上图对照，发现符号表已经被加载到了0xf0105dfd开始的地址空间中了。</p>
<p>在backtrace函数中加入显示指令所在文件名，在文件中的行数，指令所在函数名，指令在函数中的偏移等信息。</p>
<p>仔细阅读kern/kdebug.c中的debuginfo_eip函数，会发现代码是按照文件、函数、具体行号的顺序来查找指令位置的。前两步（文件、函数）已经帮我们定位好，我们只需要在指定的函数中找到目标指令即可，相关代码如下：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211216182920955.png"  ><span class="image-caption">image-20211216182920955</span></p>
<p>至此，我们利用补充后的debuginfo_eip函数可以完成mon_backtrace函数，代码如下：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211216183056270.png"  ><span class="image-caption">image-20211216183056270</span></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/12/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>项目</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>主题</tag>
      </tags>
  </entry>
  <entry>
    <title>test_my_site</title>
    <url>/2021/12/12/test-my-site/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
