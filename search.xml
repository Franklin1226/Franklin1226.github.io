<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/12/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>项目</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>主题</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer Plus Ch1</title>
    <url>/2021/12/25/C++%20Primer%20Plus%20Ch1/</url>
    <content><![CDATA[<p>本人从今天起正式为找工作做准备，由于自己想从事后端架构师相关的工作，所以目前打算先将C++作为自己的主修语言。C++ Primer Plus这本书之前也读过，但是由于缺乏笔记记录，导致现在很多知识忘得一干二净。痛定思痛，现决定开一个专栏，记录一下自己的学习过程，同时将其作为笔记以备后用。</p>
<p>今天先从第一章开始学起，首先介绍了C++和C语言的关系。可以认为C++是在C语言的基础上发展而来的，它在C语言基础上添加了以类为代表的面向对象语言特性，以及C++模板支持的泛型编程。程序是由数据+算法组成的，传统的过程化语言（如C）都是强调的程序的算法方面，首先确定计算机应采取的操作，然后用编程语言去实现它。而OOP强调的是数据，OOP程序首先设计程序运行中需要的各种类，它们准确地表示了程序要处理的东西。有了这些类，我们就可以设计一个使用这些类的对象的程序了。面向对象语言（OOP）不同于过程性编程，他的重点没有放在任务上，而是放在概念的表示上。在引入OOP之后，C++又引入了泛型编程，类比于JAVA中的泛型编程，泛型编程指的是创建独立于类型的代码，可以使程序与不同类型的数据兼容。下面一张图展示了C++和C之间的关系。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211225151312525.png"  ><span class="image-caption">image-20211225151312525</span></p>
<p>第一章最后介绍了C++程序的常规编译流程，并介绍了市面上比较常见的编译工具和集成开发环境，这里就不再一一赘述。</p>
]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer Plus Ch10</title>
    <url>/2021/12/25/C++%20Primer%20Plus%20Ch10/</url>
    <content><![CDATA[<h1 id="第10章-对象和类"><a href="#第10章-对象和类" class="headerlink" title="第10章 对象和类"></a>第10章 对象和类</h1><h2 id="10-1-过程性编程和面向对象编程"><a href="#10-1-过程性编程和面向对象编程" class="headerlink" title="10.1 过程性编程和面向对象编程"></a>10.1 过程性编程和面向对象编程</h2><h2 id="10-2-抽象和类"><a href="#10-2-抽象和类" class="headerlink" title="10.2 抽象和类"></a>10.2 抽象和类</h2><h3 id="10-2-1-类型是什么"><a href="#10-2-1-类型是什么" class="headerlink" title="10.2.1 类型是什么"></a>10.2.1 类型是什么</h3><h3 id="10-2-2-C-中的类"><a href="#10-2-2-C-中的类" class="headerlink" title="10.2.2 C++中的类"></a>10.2.2 C++中的类</h3><p>一般来说，类规范由两个部分组成。</p>
<ul>
<li>类声明：以数据成员的方式描述数据部分，以成员函数（被称为方法）的方式描述公有接口。</li>
<li>类方法定义：描述如何实现类成员函数。</li>
</ul>
<p>简单来说，类声明提供了类的蓝图，而方法定义则提供了细节。</p>
<h4 id="1-访问控制"><a href="#1-访问控制" class="headerlink" title="1. 访问控制"></a>1. 访问控制</h4><h4 id="2-控制对成员的访问"><a href="#2-控制对成员的访问" class="headerlink" title="2. 控制对成员的访问"></a>2. 控制对成员的访问</h4><p>由于隐藏数据是OPP主要的目标之一，因此数据项通常放在私有部分</p>
<p>不必在类声明中使用关键字private，因为这事类对象的默认访问控制：</p>
<p>类和结构的唯一区别是，结构的默认访问类型是public，而类为private。C++程序员通常使用类来实现类描述，而把结构限制为只表示纯粹的数据对象（常被称为普通老式数据结构）</p>
<h3 id="10-2-3-实现类成员函数"><a href="#10-2-3-实现类成员函数" class="headerlink" title="10.2.3 实现类成员函数"></a>10.2.3 实现类成员函数</h3><h4 id="1-成员函数说明"><a href="#1-成员函数说明" class="headerlink" title="1. 成员函数说明"></a>1. 成员函数说明</h4><h4 id="2-内联方法"><a href="#2-内联方法" class="headerlink" title="2. 内联方法"></a>2. 内联方法</h4><p>定义位于类声明中的函数都将自动成为内联函数，但也可以在类声明之外定义成员函数，并将其称为内联函数，只需在类实现部分中定义函数时使用inline限定符即可。</p>
<h4 id="3-方法使用哪个对象"><a href="#3-方法使用哪个对象" class="headerlink" title="3. 方法使用哪个对象"></a>3. 方法使用哪个对象</h4><p>调用成员函数时，它将使用被用来调用它的对象的数据成员。</p>
<p>所创建的每个新对象都有自己的存储空间，用于存储其内部变量和类成员；但同一个类的所有对象共享一组类方法，即每种方法只有一个副本。</p>
<h3 id="10-2-4-使用类"><a href="#10-2-4-使用类" class="headerlink" title="10.2.4 使用类"></a>10.2.4 使用类</h3><h3 id="10-2-5-修改实现"><a href="#10-2-5-修改实现" class="headerlink" title="10.2.5 修改实现"></a>10.2.5 修改实现</h3><h3 id="10-2-6-小结"><a href="#10-2-6-小结" class="headerlink" title="10.2.6 小结"></a>10.2.6 小结</h3><h2 id="10-3-类的构造函数和析构函数"><a href="#10-3-类的构造函数和析构函数" class="headerlink" title="10.3 类的构造函数和析构函数"></a>10.3 类的构造函数和析构函数</h2><p>构造函数没有返回值</p>
<h3 id="10-3-1-声明和定义构造函数"><a href="#10-3-1-声明和定义构造函数" class="headerlink" title="10.3.1 声明和定义构造函数"></a>10.3.1 声明和定义构造函数</h3><h3 id="10-3-2-使用构造函数"><a href="#10-3-2-使用构造函数" class="headerlink" title="10.3.2 使用构造函数"></a>10.3.2 使用构造函数</h3><p>C++提供了两种使用构造函数 初始化对象的方式。</p>
<p>①显式调用构造函数：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220117094315743.png"  ><span class="image-caption">image-20220117094315743</span></p>
<p>②隐式地调用构造函数</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220117094342342.png"  ><span class="image-caption">image-20220117094342342</span></p>
<p>下面这种方式先是构造了一个临时变量，并将临时变量的值赋给garment，然后程序会选择在某个时候调用析构函数销毁这个临时变量。</p>
<p>③C++11还提供了列表初始化语法，只要提供与某个构造函数的参数列表匹配的内容，并用大括号括起即可。如下所示：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220117110553357.png"  ><span class="image-caption">image-20220117110553357</span></p>
<p>另外C++11还提供了名为std::initialize_list的类，用作函数参数或方法参数的类型，这个类可表示任意长度的列表。</p>
<h3 id="10-3-3-默认构造函数"><a href="#10-3-3-默认构造函数" class="headerlink" title="10.3.3 默认构造函数"></a>10.3.3 默认构造函数</h3><p>默认构造函数是在未提供显式初始值时，用来创建对象的构造函数。如果未提供任何构造函数，则C++将自动提供默认构造函数。它是默认构造函数的隐式版本，不做任何工作。</p>
<p>记住，只有没提供任何构造函数时，编译器才会提供默认构造函数，否则需要提供自己的构造函数。</p>
<p>定义默认构造函数的方式有两种</p>
<p>①给已有的构造函数的所有参数提供默认值</p>
<p>②通过函数重载定义另一个没有参数的构造函数</p>
<p>由于只能有一个默认构造函数，因此不能同时采用上述两种方式。</p>
<h3 id="10-3-4-析构函数"><a href="#10-3-4-析构函数" class="headerlink" title="10.3.4 析构函数"></a>10.3.4 析构函数</h3><p>用构造函数创建对象后，程序负责跟踪该对象直到其过期为止。对象过期时，程序将自动调用一个特殊的成员函数——析构函数来完成清理工作。针对构造函数new出来的内存，需要用析构函数将其delete掉。</p>
<p>与构造函数不同的是，析构函数没有参数。</p>
<p>什么时候调用析构函数，是由编译器决定的，通常不应在代码中显式地调用析构函数。</p>
<p>如果创建的是静态存储类对象，则其析构函数将在程序结束时自动被调用。如果创建的是自动存储类对象，其析构函数将在程序执行完代码块时被自动调用。如果对象是new出来的，使用delete来释放内存时，析构函数将自动被调用。</p>
<p>如果程序员没有提供析构函数，编译器会先隐式声明一个默认析构函数，在发现有对象被删除之后，再提供具体的析构函数的定义。</p>
<h3 id="10-3-5-改进Stock类"><a href="#10-3-5-改进Stock类" class="headerlink" title="10.3.5 改进Stock类"></a>10.3.5 改进Stock类</h3><p>在函数的括号后面加上const关键字，可以保证函数不会修改调用的对象</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220117111140290.png"  ><span class="image-caption">image-20220117111140290</span></p>
<p>这里需要在声明和定义中都加上const，这种类函数被称为const成员函数，只要类方法不修改调用对象，就应将其声明为const。</p>
<h3 id="10-3-6-构造函数和析构函数小结"><a href="#10-3-6-构造函数和析构函数小结" class="headerlink" title="10.3.6 构造函数和析构函数小结"></a>10.3.6 构造函数和析构函数小结</h3><p>如果有一个构造函数原型如下</p>
<p>Bozo(int n)</p>
<p>那么可以用int型数据去初始化Bozo对象</p>
<p>Bozo tubby = 32</p>
<p>接受一个参数的构造函数允许使用赋值语法将对象初始化为一个值。</p>
<p>Classname object = value;</p>
<p>后面11章会介绍如何关闭这一特性，因为这种特性可能会带来一些错误。</p>
<h2 id="10-4-this指针"><a href="#10-4-this指针" class="headerlink" title="10.4 this指针"></a>10.4 this指针</h2><h2 id="10-5-对象数组"><a href="#10-5-对象数组" class="headerlink" title="10.5 对象数组"></a>10.5 对象数组</h2><p>初始化对象数组的方案是，首先使用默认构造函数创建数组元素，然后花括号中的构造函数将创建临时对象，然后将临时对象的内容复制到相应的元素中。因此，要创建类对象数组，则这个类必须有默认构造函数。</p>
<h2 id="10-6-类作用域"><a href="#10-6-类作用域" class="headerlink" title="10.6 类作用域"></a>10.6 类作用域</h2><h3 id="10-6-1-作用域为类的常量"><a href="#10-6-1-作用域为类的常量" class="headerlink" title="10.6.1 作用域为类的常量"></a>10.6.1 作用域为类的常量</h3><p>有两种方式可以实现创建一个由所有对象共享的常量</p>
<p>①在类中声明一个枚举。在类中声明的枚举的作用域为整个类，因此可以用枚举为整型常量提供作用域为整个类的符号名称。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220117200659115.png"  ><span class="image-caption">image-20220117200659115</span></p>
<p>②使用关键字static</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220117200958140.png"  ><span class="image-caption">image-20220117200958140</span></p>
<h3 id="10-6-2-作用域内枚举（C-11）"><a href="#10-6-2-作用域内枚举（C-11）" class="headerlink" title="10.6.2 作用域内枚举（C++11）"></a>10.6.2 作用域内枚举（C++11）</h3><p>可以使用class/struct来限定枚举量</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220117201800546.png"  ><span class="image-caption">image-20220117201800546</span></p>
<p>作用域内枚举不能隐式的转换为整型，但在必要时，可进行显式类型转换：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220117202938358.png"  ><span class="image-caption">image-20220117202938358</span></p>
<p>C++11还可以显式指出底层类型。</p>
<h2 id="10-7-抽象数据类型"><a href="#10-7-抽象数据类型" class="headerlink" title="10.7 抽象数据类型"></a>10.7 抽象数据类型</h2>]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer Plus Ch11</title>
    <url>/2021/12/25/C++%20Primer%20Plus%20Ch11/</url>
    <content><![CDATA[<h1 id="第11章-使用类"><a href="#第11章-使用类" class="headerlink" title="第11章 使用类"></a>第11章 使用类</h1><h2 id="11-1-运算符重载"><a href="#11-1-运算符重载" class="headerlink" title="11.1 运算符重载"></a>11.1 运算符重载</h2><p>运算符重载将重载的概念扩展到运算符上，允许赋予C++运算符多种含义。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220118093835632.png"  ><span class="image-caption">image-20220118093835632</span></p>
<h2 id="11-2-计算时间：一个运算符重载示例"><a href="#11-2-计算时间：一个运算符重载示例" class="headerlink" title="11.2 计算时间：一个运算符重载示例"></a>11.2 计算时间：一个运算符重载示例</h2><h3 id="11-2-1-添加加法运算符"><a href="#11-2-1-添加加法运算符" class="headerlink" title="11.2.1 添加加法运算符"></a>11.2.1 添加加法运算符</h3><h3 id="11-2-2-重载限制"><a href="#11-2-2-重载限制" class="headerlink" title="11.2.2 重载限制"></a>11.2.2 重载限制</h3><p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220118102858119.png"  ><span class="image-caption">image-20220118102858119</span></p>
<h3 id="11-2-3-其他重载运算符"><a href="#11-2-3-其他重载运算符" class="headerlink" title="11.2.3 其他重载运算符"></a>11.2.3 其他重载运算符</h3><p>非成员重载运算符需要把所有运算对象都写在参数里面。</p>
<h2 id="11-3-友元"><a href="#11-3-友元" class="headerlink" title="11.3 友元"></a>11.3 友元</h2><p>友元有三种：</p>
<ul>
<li><p>友元函数；</p>
</li>
<li><p>友元类；</p>
</li>
<li><p>友元成员函数</p>
</li>
</ul>
<p>通过让函数成为类的友元，可以赋予该函数与类的成员函数相同的访问权限。</p>
<p>使用友元函数可以重载非成员运算符函数。</p>
<h3 id="11-3-1-创建友元"><a href="#11-3-1-创建友元" class="headerlink" title="11.3.1 创建友元"></a>11.3.1 创建友元</h3><p>友元函数的原型放在类声明中，并在原型声明前加上关键字friend：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220118110047453.png"  ><span class="image-caption">image-20220118110047453</span></p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220118110137458.png"  ><span class="image-caption">image-20220118110137458</span></p>
<p>不要在定义中使用关键字friend。</p>
<p>如果要为类重载运算符，并将非类的项作为其第一个操作数，则可以用友元函数来反转操作数的顺序。</p>
<h3 id="11-3-2-常用的友元：重载-lt-lt-运算符"><a href="#11-3-2-常用的友元：重载-lt-lt-运算符" class="headerlink" title="11.3.2 常用的友元：重载&lt;&lt;运算符"></a>11.3.2 常用的友元：重载&lt;&lt;运算符</h3><h4 id="1-lt-lt-的一种重载版本"><a href="#1-lt-lt-的一种重载版本" class="headerlink" title="1. &lt;&lt;的一种重载版本"></a>1. &lt;&lt;的一种重载版本</h4><p>非成员函数重载运算符（友元函数）</p>
<h4 id="2-lt-lt-的第二种重载版本"><a href="#2-lt-lt-的第二种重载版本" class="headerlink" title="2. &lt;&lt;的第二种重载版本"></a>2. &lt;&lt;的第二种重载版本</h4><h2 id="11-4-重载运算符：作为成员函数还是非成员函数"><a href="#11-4-重载运算符：作为成员函数还是非成员函数" class="headerlink" title="11.4 重载运算符：作为成员函数还是非成员函数"></a>11.4 重载运算符：作为成员函数还是非成员函数</h2><p>有时，成员函数是唯一合法的选择；有时，根据类设计，使用非成员函数版本可能更好（尤其是为类定义类型转换时）。</p>
<h2 id="11-5-再谈重载：一个矢量类"><a href="#11-5-再谈重载：一个矢量类" class="headerlink" title="11.5 再谈重载：一个矢量类"></a>11.5 再谈重载：一个矢量类</h2><h3 id="11-5-1-使用状态成员"><a href="#11-5-1-使用状态成员" class="headerlink" title="11.5.1 使用状态成员"></a>11.5.1 使用状态成员</h3><h3 id="11-5-2-为Vector类重载算术运算符"><a href="#11-5-2-为Vector类重载算术运算符" class="headerlink" title="11.5.2 为Vector类重载算术运算符"></a>11.5.2 为Vector类重载算术运算符</h3><p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220118150936989.png"  ><span class="image-caption">image-20220118150936989</span></p>
<p>一个好的编程习惯。</p>
<h4 id="1-乘法"><a href="#1-乘法" class="headerlink" title="1. 乘法"></a>1. 乘法</h4><h4 id="2-对已重载的运算符进行重载"><a href="#2-对已重载的运算符进行重载" class="headerlink" title="2. 对已重载的运算符进行重载"></a>2. 对已重载的运算符进行重载</h4><p>对于一元运算符可以使用如下声明和定义方式</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220118151503203.png"  ><span class="image-caption">image-20220118151503203</span></p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220118151629290.png"  ><span class="image-caption">image-20220118151629290</span></p>
<h3 id="11-5-3-对实现的说明"><a href="#11-5-3-对实现的说明" class="headerlink" title="11.5.3 对实现的说明"></a>11.5.3 对实现的说明</h3><h3 id="11-5-4-使用Vector类来模拟随机漫步"><a href="#11-5-4-使用Vector类来模拟随机漫步" class="headerlink" title="11.5.4 使用Vector类来模拟随机漫步"></a>11.5.4 使用Vector类来模拟随机漫步</h3><h2 id="11-6-类的自动转换和强制类型转换"><a href="#11-6-类的自动转换和强制类型转换" class="headerlink" title="11.6 类的自动转换和强制类型转换"></a>11.6 类的自动转换和强制类型转换</h2><p>只接受一个参数的构造函数可以实现类型自动转换，可以使用关键字explicit来关闭这个特性。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220118154649645.png"  ><span class="image-caption">image-20220118154649645</span></p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220118154827449.png"  ><span class="image-caption">image-20220118154827449</span></p>
<h3 id="11-6-1-转换函数"><a href="#11-6-1-转换函数" class="headerlink" title="11.6.1 转换函数"></a>11.6.1 转换函数</h3><p>转换函数是用户定义的强制类型转换，可以像使用强制类型转换那样使用它们。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220118155651538.png"  ><span class="image-caption">image-20220118155651538</span></p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220118155723158.png"  ><span class="image-caption">image-20220118155723158</span></p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220118155734622.png"  ><span class="image-caption">image-20220118155734622</span></p>
<p>同样可以使用explicit来限制转换函数只能使用显式转换（强制转换）。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220118160225095.png"  ><span class="image-caption">image-20220118160225095</span></p>
<h3 id="11-6-2-转换函数和友元函数"><a href="#11-6-2-转换函数和友元函数" class="headerlink" title="11.6.2 转换函数和友元函数"></a>11.6.2 转换函数和友元函数</h3><h2 id="11-7-总结"><a href="#11-7-总结" class="headerlink" title="11.7 总结"></a>11.7 总结</h2>]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer Plus Ch2</title>
    <url>/2021/12/25/C++%20Primer%20Plus%20Ch2/</url>
    <content><![CDATA[<h1 id="第2章-开始学习C"><a href="#第2章-开始学习C" class="headerlink" title="第2章 开始学习C++"></a>第2章 开始学习C++</h1><h2 id="2-1-进入C"><a href="#2-1-进入C" class="headerlink" title="2.1 进入C++"></a>2.1 进入C++</h2><h3 id="2-1-1-main-函数"><a href="#2-1-1-main-函数" class="headerlink" title="2.1.1 main()函数"></a>2.1.1 main()函数</h3><p>以myfirst.cpp为例分析main函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">/ myfirst.cpp--displays a message</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>                           <span class="comment">// a PREPROCESSOR directive</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>                                    <span class="comment">// function header</span></span></span><br><span class="line"><span class="function"></span>&#123;                                             <span class="comment">// start of function body</span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;                      <span class="comment">// make definitions visible</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Come up and C++ me some time.&quot;</span>;  <span class="comment">// message</span></span><br><span class="line">    cout &lt;&lt; endl;                             <span class="comment">// start a new line</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;You won&#x27;t regret it!&quot;</span> &lt;&lt; endl;   <span class="comment">// more output</span></span><br><span class="line"><span class="comment">// If the output window closes before you can read it,</span></span><br><span class="line"><span class="comment">// add the following code:</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;Press any key to continue.&quot; &lt;&lt;endl;</span></span><br><span class="line">	<span class="comment">// cin.get();                                                   </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;                                 <span class="comment">// terminate main()</span></span><br><span class="line">&#125;              </span><br></pre></td></tr></table></figure>



<p>这里提到了一个细节，就是int main()函数的最后，可以不加return 语句，这时候编译器会默认在最后加上return 0。</p>
<h3 id="2-1-2-C-注释"><a href="#2-1-2-C-注释" class="headerlink" title="2.1.2 C++注释"></a>2.1.2 C++注释</h3><p>这里没啥好讲的，很基础。但一个好的编程习惯是使用//形式的注释，这种注释不存在/*和*/匹配的问题，所以出错的可能性很小。</p>
<h3 id="2-1-3-C-预处理器和iostream文件"><a href="#2-1-3-C-预处理器和iostream文件" class="headerlink" title="2.1.3 C++预处理器和iostream文件"></a>2.1.3 C++预处理器和iostream文件</h3><p>C++会使用一个预处理器，处理以#开头的编译指令</p>
<p>myfirst.cpp中使用了#include编译指令</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>针对这条编译指令，预处理器会将iostream文件的内容添加到程序中，这样源文件就可以使用iostream中定义的内容了。</p>
<h3 id="2-1-4-头文件名"><a href="#2-1-4-头文件名" class="headerlink" title="2.1.4 头文件名"></a>2.1.4 头文件名</h3><p>像iostream这样的文件被叫做包含文件（include file），也叫做头文件（header file），每个头文件都支持一组特定的工具。C语言的传统是使用扩展名h，但C++的用法变了，不再使用扩展名h，一些C头文件被转换为C++头文件，其文件名去掉扩展名h，并在前面加上前缀c，如math.h变成了cmath。对于纯粹的C++头文件，去掉h的头文件可以包含名称空间。</p>
<h3 id="2-1-5-名称空间"><a href="#2-1-5-名称空间" class="headerlink" title="2.1.5 名称空间"></a>2.1.5 名称空间</h3><p>虽然已经看了很多c++程序，但本人对名称空间的概念感觉理解的并不是很深入，只是知道其可以防止变量或函数的命名冲突。这在大型项目中尤其重要。至于如何去定义不同的命名空间，现在还不得而知。</p>
<h3 id="2-1-6-使用cout进行C-输出"><a href="#2-1-6-使用cout进行C-输出" class="headerlink" title="2.1.6 使用cout进行C++输出"></a>2.1.6 使用cout进行C++输出</h3><p>这里提到了\n和endl的区别，endl会立刻刷新输出（立即显示在屏幕上），而\n不能提供这样的保证。</p>
<h3 id="2-1-7-C-源代码的格式化"><a href="#2-1-7-C-源代码的格式化" class="headerlink" title="2.1.7 C++源代码的格式化"></a>2.1.7 C++源代码的格式化</h3><p>这一部分讲了一些代码编写的格式规范问题，不做过多介绍。</p>
<h2 id="2-2-C-语句"><a href="#2-2-C-语句" class="headerlink" title="2.2 C++语句"></a>2.2 C++语句</h2><h3 id="2-2-1-声明语句和变量"><a href="#2-2-1-声明语句和变量" class="headerlink" title="2.2.1 声明语句和变量"></a>2.2.1 声明语句和变量</h3><p>没啥好讲的，变量在使用前必须先声明。定义声明和引用声明的区别是，定义声明为变量分配空间。</p>
<h3 id="2-2-2-赋值语句"><a href="#2-2-2-赋值语句" class="headerlink" title="2.2.2 赋值语句"></a>2.2.2 赋值语句</h3><p>连续赋值语句从右向左执行。</p>
<h3 id="2-2-3-cout的新花样"><a href="#2-2-3-cout的新花样" class="headerlink" title="2.2.3 cout的新花样"></a>2.2.3 cout的新花样</h3><p>cout能根据&lt;&lt;后跟着的数据类型调整输出行为，本质上是运算符的重载。</p>
<h2 id="2-3-其他C-语句"><a href="#2-3-其他C-语句" class="headerlink" title="2.3 其他C++语句"></a>2.3 其他C++语句</h2><h3 id="2-3-1-使用cin"><a href="#2-3-1-使用cin" class="headerlink" title="2.3.1 使用cin"></a>2.3.1 使用cin</h3><p>也是很基础的东西，不再赘述</p>
<h3 id="2-3-2-使用cout进行拼接"><a href="#2-3-2-使用cout进行拼接" class="headerlink" title="2.3.2 使用cout进行拼接"></a>2.3.2 使用cout进行拼接</h3><p>介绍了cout可以使用&lt;&lt;进行拼接的特性，也是基本特性，不再赘述。</p>
<h3 id="2-3-3-类简介"><a href="#2-3-3-类简介" class="headerlink" title="2.3.3 类简介"></a>2.3.3 类简介</h3><p>讲了面向对象语言中对类的一些基本认识。</p>
<h2 id="2-4-函数"><a href="#2-4-函数" class="headerlink" title="2.4 函数"></a>2.4 函数</h2><h3 id="2-4-1-使用有返回值的函数"><a href="#2-4-1-使用有返回值的函数" class="headerlink" title="2.4.1 使用有返回值的函数"></a>2.4.1 使用有返回值的函数</h3><h3 id="2-4-2-函数变体"><a href="#2-4-2-函数变体" class="headerlink" title="2.4.2 函数变体"></a>2.4.2 函数变体</h3><p>在有些语言中，有返回值的函数被称为函数，没有返回值的函数被称为过程或子过程。但C++中，这两种变体都被成为函数。</p>
<h3 id="2-4-3-用户定义的函数"><a href="#2-4-3-用户定义的函数" class="headerlink" title="2.4.3 用户定义的函数"></a>2.4.3 用户定义的函数</h3><p>main函数的返回值返回给了谁？</p>
<p>答：返回给了操作系统，在一些情况下，命令行窗口（cmd）接受main函数的返回值，用来判断程序的运行情况。默认正常退出返回0.</p>
<h3 id="2-4-4-用户定义的有返回值的函数"><a href="#2-4-4-用户定义的有返回值的函数" class="headerlink" title="2.4.4 用户定义的有返回值的函数"></a>2.4.4 用户定义的有返回值的函数</h3><h3 id="2-4-5-在多函数程序中使用using编译指令"><a href="#2-4-5-在多函数程序中使用using编译指令" class="headerlink" title="2.4.5 在多函数程序中使用using编译指令"></a>2.4.5 在多函数程序中使用using编译指令</h3><p>using namespace std;这条编译指令可以选择合适大小的作用域，在作用域外的程序部分不能使用std名称空间中定义的元素。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211226163940797.png"  ><span class="image-caption">image-20211226163940797</span></p>
]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer Plus Ch4</title>
    <url>/2021/12/25/C++%20Primer%20Plus%20Ch4/</url>
    <content><![CDATA[<h1 id="第4章-复合类型"><a href="#第4章-复合类型" class="headerlink" title="第4章 复合类型"></a>第4章 复合类型</h1><h2 id="4-1-数组"><a href="#4-1-数组" class="headerlink" title="4.1 数组"></a>4.1 数组</h2><h3 id="4-1-1-程序说明"><a href="#4-1-1-程序说明" class="headerlink" title="4.1.1 程序说明"></a>4.1.1 程序说明</h3><h3 id="4-1-2-数组的初始化规则"><a href="#4-1-2-数组的初始化规则" class="headerlink" title="4.1.2 数组的初始化规则"></a>4.1.2 数组的初始化规则</h3><h3 id="4-1-3-C-11数组初始化方法"><a href="#4-1-3-C-11数组初始化方法" class="headerlink" title="4.1.3 C++11数组初始化方法"></a>4.1.3 C++11数组初始化方法</h3><p>C++中使用{}初始化时可以省略=号，并且{}中可以不包含任何东西，这将所有元素都设置为零；列表初始化禁止缩窄转换，在第3章中有介绍过。下面是禁止缩窄转换的例子：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228161313425.png"  ><span class="image-caption">image-20211228161313425</span></p>
<h2 id="4-2-字符串"><a href="#4-2-字符串" class="headerlink" title="4.2 字符串"></a>4.2 字符串</h2><p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228162544302.png"  ><span class="image-caption">image-20211228162544302</span></p>
<h3 id="4-2-1-拼接字符串常量"><a href="#4-2-1-拼接字符串常量" class="headerlink" title="4.2.1 拼接字符串常量"></a>4.2.1 拼接字符串常量</h3><p>在C++中字符串常量可以不使用+号，直接进行拼接，任何两个由空白分隔的字符串常量都将自动拼接成一个。这还是我第一次知道C++的字符串常量还能这么操作，下面是一个例子</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228163253939.png"  ><span class="image-caption">image-20211228163253939</span></p>
<p>拼接时前面的字符串的串尾的’\0’会被后面字符串的第一个字符取代。</p>
<h3 id="4-2-2-在数组中使用字符串"><a href="#4-2-2-在数组中使用字符串" class="headerlink" title="4.2.2 在数组中使用字符串"></a>4.2.2 在数组中使用字符串</h3><p>程序在处理字符串数组的时候本质上处理的是数组的地址对应的内容，当遇到’\0’时处理结束</p>
<h3 id="4-2-3-字符串输入"><a href="#4-2-3-字符串输入" class="headerlink" title="4.2.3 字符串输入"></a>4.2.3 字符串输入</h3><p>揭露了一个字符串输入中的问题，定义了char name[20],使用cin &gt;&gt; name时，用户输入的字符串长度大于20会发生什么问题？将在第17章介绍。</p>
<h3 id="4-2-4-每次读取一行字符串输入"><a href="#4-2-4-每次读取一行字符串输入" class="headerlink" title="4.2.4 每次读取一行字符串输入"></a>4.2.4 每次读取一行字符串输入</h3><p>cin.getline（）和cin.get(),但是getline丢弃换行符，get将其保留在输入队列中</p>
<p>cin.get(Array, ArraySize).get()可以连续调用。get()比getline()更为仔细，可以用来判断输入是因为读完一整行还是数组已填满。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228170541128.png"  ><span class="image-caption">image-20211228170541128</span></p>
<p>这一部分没有代码举例，我能大体知道说的是什么意思，留作记录。</p>
<h2 id="4-3-string类简介"><a href="#4-3-string类简介" class="headerlink" title="4.3 string类简介"></a>4.3 string类简介</h2><h3 id="4-3-1-C-11字符串初始化"><a href="#4-3-1-C-11字符串初始化" class="headerlink" title="4.3.1 C++11字符串初始化"></a>4.3.1 C++11字符串初始化</h3><h3 id="4-3-2-赋值、拼接和附加"><a href="#4-3-2-赋值、拼接和附加" class="headerlink" title="4.3.2 赋值、拼接和附加"></a>4.3.2 赋值、拼接和附加</h3><p>可以将一个string赋值给另一个string对象，使用+可以很轻松的实现string之间，string与字符串常量的拼接工作。</p>
<h3 id="4-3-3-string类的其他操作"><a href="#4-3-3-string类的其他操作" class="headerlink" title="4.3.3 string类的其他操作"></a>4.3.3 string类的其他操作</h3><p>总结就是string的操作比c风格的字符串操作（定义在string.h中）要方便，并且内存安全。</p>
<h3 id="4-3-4-string类I-O"><a href="#4-3-4-string类I-O" class="headerlink" title="4.3.4 string类I/O"></a>4.3.4 string类I/O</h3><p>getline(cin, str)而不是之前的cin.getline(target, length).这是由于istream类中没有处理string对象的类方法。cin&gt;&gt;str其实使用的是string类的一个友元函数。</p>
<h3 id="4-3-5-其他形式的字符串字面值"><a href="#4-3-5-其他形式的字符串字面值" class="headerlink" title="4.3.5 其他形式的字符串字面值"></a>4.3.5 其他形式的字符串字面值</h3><p>wchar_t,char16_t,char32_t字符串举例：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228184351570.png"  ><span class="image-caption">image-20211228184351570</span></p>
<p>原始字符串</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228184557439.png"  ><span class="image-caption">image-20211228184557439</span></p>
<p>用”(和)”标识，也可以在”和(之间加入任意字符的自定义定界符，如下：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228185225827.png"  ><span class="image-caption">image-20211228185225827</span></p>
<h2 id="4-4-结构简介"><a href="#4-4-结构简介" class="headerlink" title="4.4 结构简介"></a>4.4 结构简介</h2><p>C++允许在声明结构变量时省略关键字struct:</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228191616243.png"  ><span class="image-caption">image-20211228191616243</span></p>
<h3 id="4-4-1-在程序中使用结构"><a href="#4-4-1-在程序中使用结构" class="headerlink" title="4.4.1 在程序中使用结构"></a>4.4.1 在程序中使用结构</h3><p>结构可以声明在外部也可以声明在函数内部，紧跟{之后。</p>
<h3 id="4-4-2-C-11结构初始化"><a href="#4-4-2-C-11结构初始化" class="headerlink" title="4.4.2 C++11结构初始化"></a>4.4.2 C++11结构初始化</h3><p>结构也可以用{}初始化，省略=号，如下：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228193241191.png"  ><span class="image-caption">image-20211228193241191</span></p>
<p>同样不支持缩窄转换</p>
<h3 id="4-4-3-结构可以将string类作为成员吗"><a href="#4-4-3-结构可以将string类作为成员吗" class="headerlink" title="4.4.3 结构可以将string类作为成员吗"></a>4.4.3 结构可以将string类作为成员吗</h3><p>可以</p>
<h3 id="4-4-4-其他结构属性"><a href="#4-4-4-其他结构属性" class="headerlink" title="4.4.4 其他结构属性"></a>4.4.4 其他结构属性</h3><p>可以用一个结构变量给另外一个结构变量赋值。</p>
<h3 id="4-4-5-结构数组"><a href="#4-4-5-结构数组" class="headerlink" title="4.4.5 结构数组"></a>4.4.5 结构数组</h3><h3 id="4-4-6-结构中的位字段"><a href="#4-4-6-结构中的位字段" class="headerlink" title="4.4.6 结构中的位字段"></a>4.4.6 结构中的位字段</h3><p>这个位字段当时在学习c语言的时候就没有学得特别透彻，在这里进行夯实知识。</p>
<h2 id="4-5-共用体"><a href="#4-5-共用体" class="headerlink" title="4.5 共用体"></a>4.5 共用体</h2><p>一个嵌套使用匿名共用体（union）的例子</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228203115180.png"  ><span class="image-caption">image-20211228203115180</span></p>
<h2 id="4-6-枚举"><a href="#4-6-枚举" class="headerlink" title="4.6 枚举"></a>4.6 枚举</h2><p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228203208050.png"  ><span class="image-caption">image-20211228203208050</span></p>
<p>默认情况下，枚举从0开始给枚举量赋值。对于枚举类型只定义了赋值运算符，没有为枚举定义算术运算。枚举量可以被提升为int类型，但int不能自动转换为枚举类型。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228203652666.png"  ><span class="image-caption">image-20211228203652666</span></p>
<p>在算术表达式中枚举量自动整型提升为int。</p>
<p>但可以将int强制转换为枚举类型</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228204306413.png"  ><span class="image-caption">image-20211228204306413</span></p>
<p>枚举常用来定义相关的符号常量。</p>
<h3 id="4-6-1-设置枚举量的值"><a href="#4-6-1-设置枚举量的值" class="headerlink" title="4.6.1 设置枚举量的值"></a>4.6.1 设置枚举量的值</h3><p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228204842645.png"  ><span class="image-caption">image-20211228204842645</span></p>
<h3 id="4-6-2-枚举的取值范围"><a href="#4-6-2-枚举的取值范围" class="headerlink" title="4.6.2 枚举的取值范围"></a>4.6.2 枚举的取值范围</h3><p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228205726984.png"  ><span class="image-caption">image-20211228205726984</span></p>
<h2 id="4-7-指针和自由存储空间"><a href="#4-7-指针和自由存储空间" class="headerlink" title="4.7 指针和自由存储空间"></a>4.7 指针和自由存储空间</h2><h3 id="4-7-1-声明和初始化指针"><a href="#4-7-1-声明和初始化指针" class="headerlink" title="4.7.1 声明和初始化指针"></a>4.7.1 声明和初始化指针</h3><h3 id="4-7-2-指针的危险"><a href="#4-7-2-指针的危险" class="headerlink" title="4.7.2 指针的危险"></a>4.7.2 指针的危险</h3><p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228212512321.png"  ><span class="image-caption">image-20211228212512321</span></p>
<h3 id="4-7-3-指针和数字"><a href="#4-7-3-指针和数字" class="headerlink" title="4.7.3 指针和数字"></a>4.7.3 指针和数字</h3><h3 id="4-7-4-使用new来分配内存"><a href="#4-7-4-使用new来分配内存" class="headerlink" title="4.7.4 使用new来分配内存"></a>4.7.4 使用new来分配内存</h3><p>之前在C语言中习惯使用malloc()来分配内存，我个人不是很习惯使用new运算符来分配内存。下面将详细介绍这个新方法。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228213650097.png"  ><span class="image-caption">image-20211228213650097</span></p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228214040996.png"  ><span class="image-caption">image-20211228214040996</span></p>
<h3 id="4-7-5-使用delete释放内存"><a href="#4-7-5-使用delete释放内存" class="headerlink" title="4.7.5 使用delete释放内存"></a>4.7.5 使用delete释放内存</h3><p>不能重复释放内存，不能释放变量对应的内存空间。</p>
<h3 id="4-7-6-使用new来创建动态数组"><a href="#4-7-6-使用new来创建动态数组" class="headerlink" title="4.7.6 使用new来创建动态数组"></a>4.7.6 使用new来创建动态数组</h3><p>对于使用new创建的数组，应使用另一种格式的delete来释放：</p>
<p>delete [] psome</p>
<h2 id="4-8-指针、数组和指针算数"><a href="#4-8-指针、数组和指针算数" class="headerlink" title="4.8 指针、数组和指针算数"></a>4.8 指针、数组和指针算数</h2><h3 id="4-8-1-程序说明"><a href="#4-8-1-程序说明" class="headerlink" title="4.8.1 程序说明"></a>4.8.1 程序说明</h3><p>区别一：指针可以赋值，但数组名是常量，不可以改变其值</p>
<p>区别二：对数组应用sizeof得到数组的长度，对指针应用sizeof得到的是指针的长度，即使指针指向的是一个数组</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211229150610676.png"  ><span class="image-caption">image-20211229150610676</span></p>
<h3 id="4-8-2-指针小结"><a href="#4-8-2-指针小结" class="headerlink" title="4.8.2 指针小结"></a>4.8.2 指针小结</h3><h3 id="4-8-3-指针和字符串"><a href="#4-8-3-指针和字符串" class="headerlink" title="4.8.3 指针和字符串"></a>4.8.3 指针和字符串</h3><p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211229184431386.png"  ><span class="image-caption">image-20211229184431386</span></p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211229190734205.png"  ><span class="image-caption">image-20211229190734205</span></p>
<p>strncpy会视具体情况决定是否在目标串结尾添加空字符</p>
<p>对于C风格的字符数组，只能使用strcpy()和strncpy()来讲字符串赋给数组，而string类使赋值变得更简单，并且不用担心数组越界的问题。</p>
<h3 id="4-8-4-使用new创建动态结构"><a href="#4-8-4-使用new创建动态结构" class="headerlink" title="4.8.4 使用new创建动态结构"></a>4.8.4 使用new创建动态结构</h3><h3 id="4-8-5-自动存储、静态存储和动态存储"><a href="#4-8-5-自动存储、静态存储和动态存储" class="headerlink" title="4.8.5 自动存储、静态存储和动态存储"></a>4.8.5 自动存储、静态存储和动态存储</h3><p>自动存储使程序为变量自动分配的存储空间，在其函数作用域结束后自动释放。自动变量通常存储在栈中。</p>
<p>静态存储是整个程序执行期间都存在的存储方式。使变量成为静态的方式有两种：一种是在函数外面定义它；另一种是在声明变量时使用关键字static。</p>
<p>动态存储就是使用new和delete分配和释放的空间，在C++中被称为自由存储空间或堆.C++指针有助于自动完成内存释放的工作，可以有效防止内存泄漏。</p>
<h2 id="4-9-类型组合"><a href="#4-9-类型组合" class="headerlink" title="4.9 类型组合"></a>4.9 类型组合</h2><h2 id="4-10-数组的替代品"><a href="#4-10-数组的替代品" class="headerlink" title="4.10 数组的替代品"></a>4.10 数组的替代品</h2><h3 id="4-10-1-模板类vector"><a href="#4-10-1-模板类vector" class="headerlink" title="4.10.1 模板类vector"></a>4.10.1 模板类vector</h3><h3 id="4-10-2-模板类array（C-11）"><a href="#4-10-2-模板类array（C-11）" class="headerlink" title="4.10.2 模板类array（C++11）"></a>4.10.2 模板类array（C++11）</h3><p>array和数组一样，长度是固定的，使用栈（静态内存分配），而不是自由存储区，因此其效率与数组相同，但更方便，更安全。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211229200434776.png"  ><span class="image-caption">image-20211229200434776</span></p>
<p>与创建vector对象不同的是，n_elem不能是变量。</p>
<h3 id="4-10-3-比较数组、vector对象和array对象"><a href="#4-10-3-比较数组、vector对象和array对象" class="headerlink" title="4.10.3 比较数组、vector对象和array对象"></a>4.10.3 比较数组、vector对象和array对象</h3><p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211229201235113.png"  ><span class="image-caption">image-20211229201235113</span></p>
<h2 id="4-11-总结"><a href="#4-11-总结" class="headerlink" title="4.11 总结"></a>4.11 总结</h2>]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer Plus Ch3</title>
    <url>/2021/12/25/C++%20Primer%20Plus%20Ch3/</url>
    <content><![CDATA[<h1 id="第3章-处理数据"><a href="#第3章-处理数据" class="headerlink" title="第3章 处理数据"></a>第3章 处理数据</h1><h2 id="3-1-简单变量"><a href="#3-1-简单变量" class="headerlink" title="3.1 简单变量"></a>3.1 简单变量</h2><p>书中说到了一个对变量的理解，变量在声明时，程序会为其分配指定大小的空间，然后程序员可以使用变量名来找到这块空间。</p>
<h3 id="3-1-1-变量名"><a href="#3-1-1-变量名" class="headerlink" title="3.1.1 变量名"></a>3.1.1 变量名</h3><p>下面给出C++中变量的命名规则</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211226171614191.png"  ><span class="image-caption">image-20211226171614191</span></p>
<p>其中倒数第二条说的这种情况确实在阅读一些库函数源码的时候遇到过，是留给C++的标准库和编译器的实现者在编写代码时使用的，用来和普通用户代码做区分。</p>
<h3 id="3-1-2-整型"><a href="#3-1-2-整型" class="headerlink" title="3.1.2 整型"></a>3.1.2 整型</h3><p>一个比较新颖的知识点是1字节并不一定都是8位的，字节的定义是能够表示完整字符集的位数，对于ASCII码来说，8位就足够了；但汉字等其他语言字符可能需要更大空间来表示所有的字符。如Unicode，因此有的实现需要16位甚至32位的字节。</p>
<p>整数的字长在C++中不同机器上可能不尽相同，C++提供了一种灵活的标准，如下所示</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211226192138130.png"  ><span class="image-caption">image-20211226192138130</span></p>
<p>由于这种灵活的规定，C++在移植到不同的机器上面时容易产生整形字节数不一致的问题。climits头文件中定义了各种限制的符号名称，如INT_MAX为int的最大取值，CHAR_BIT为字节的位数。</p>
<h3 id="3-1-2-整型short、int、long和long-long"><a href="#3-1-2-整型short、int、long和long-long" class="headerlink" title="3.1.2 整型short、int、long和long long"></a>3.1.2 整型short、int、long和long long</h3><p>C++中独有的初始化方式</p>
<p>int wrens(432);</p>
<p>int hamburgers = {24}</p>
<p>int emus{7}</p>
<p>int rocs = {};//set rocs to 0</p>
<p>int psychics{};//set psychics to 0</p>
<p>这种采用大括号进行初始化的方式可以更好地防范类型的转换错误</p>
<p>大括号这种初始化方式可以统一任何类型变量的初始化形式</p>
<h3 id="3-1-4-无符号类型"><a href="#3-1-4-无符号类型" class="headerlink" title="3.1.4 无符号类型"></a>3.1.4 无符号类型</h3><h3 id="3-1-5-选择整型类型"><a href="#3-1-5-选择整型类型" class="headerlink" title="3.1.5 选择整型类型"></a>3.1.5 选择整型类型</h3><p>一个小知识点：int被设置为对目标计算机而言最为“自然”的长度，自然长度指的是计算机处理起来效率最高的长度。</p>
<p>还有一个经验之谈，当所表示的数据用short(16位)装不下时，应将其扩展为long而不是int，这样当程序运行在一些int位16位的机器上时也不会有问题。</p>
<h3 id="3-1-6-整型字面值"><a href="#3-1-6-整型字面值" class="headerlink" title="3.1.6 整型字面值"></a>3.1.6 整型字面值</h3><p>可以使用dec,hex,oct来控制cout输出不同进制的整数，分别为十进制，十六进制和八进制。</p>
<h3 id="3-1-7-C-如何确定常量的类型"><a href="#3-1-7-C-如何确定常量的类型" class="headerlink" title="3.1.7 C++如何确定常量的类型"></a>3.1.7 C++如何确定常量的类型</h3><p>对于十进制常量，用带符号整数int,long和long long对其进行配对；对于十六进制和八进制，用int, unsigned int, long, unsigned long, long long ,unsigned long long对其进行配对，与前者相比，加入了unsigned整数。</p>
<h3 id="3-1-8-char类型：字符和小整数"><a href="#3-1-8-char类型：字符和小整数" class="headerlink" title="3.1.8 char类型：字符和小整数"></a>3.1.8 char类型：字符和小整数</h3><p>可以使用数字转义序列和字符转义序列，但字符转义序列更具有通用性</p>
<p>数字转移序列举例：\032 \x1a分别是ASCII码26的八进制和十六进制表示</p>
<p>通用字符名允许在源代码中添加一些不同国家的字母，\u或\U打头，\u后面是8个十六进制，\U后面则是16个十六进制（感觉这里书上写错了，应该分别是4和8个十六进制位）。下面看个例子：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211226212925125.png"  ><span class="image-caption">image-20211226212925125</span></p>
<p>char在默认情况下既不是有符号也不是没有符号，有C++实现决定。</p>
<p>宽字符类型wchar_t可以表示扩展字符集，这种类型与底层的一种整数类型长度和符号属性相同，这取决于C++编译器的实现。可以通过加上前缀L来指示宽字符常量和宽字符串。</p>
<p>char16_t和char32_t是对wchar的改进，指定了特定的长度和符号，分别是16位无符号和32位无符号数，分别用前缀u和U表示。</p>
<h2 id="3-2-const限定符"><a href="#3-2-const限定符" class="headerlink" title="3.2 const限定符"></a>3.2 const限定符</h2><p>const是比#define更好地一种常量定义方式。</p>
<p>C++和C中const的区别：一是作用域规则；而是C++可以用const值来声明数组长度。</p>
<h2 id="3-3-浮点数"><a href="#3-3-浮点数" class="headerlink" title="3.3 浮点数"></a>3.3 浮点数</h2><h3 id="3-3-1-书写浮点数"><a href="#3-3-1-书写浮点数" class="headerlink" title="3.3.1 书写浮点数"></a>3.3.1 书写浮点数</h3><h3 id="3-3-2-浮点类型"><a href="#3-3-2-浮点类型" class="headerlink" title="3.3.2 浮点类型"></a>3.3.2 浮点类型</h3><h3 id="3-3-3-浮点常量"><a href="#3-3-3-浮点常量" class="headerlink" title="3.3.3 浮点常量"></a>3.3.3 浮点常量</h3><p>默认情况下，程序把浮点数常量存储为double类型，但是可以通过指定f或F后缀将常量指定为float类型，或者使用l或L将浮点常量指定为long double。</p>
<h3 id="3-3-4-浮点数的优缺点"><a href="#3-3-4-浮点数的优缺点" class="headerlink" title="3.3.4 浮点数的优缺点"></a>3.3.4 浮点数的优缺点</h3><p>浮点数会发生精度丢失的问题</p>
<h2 id="3-4-C-算术运算发"><a href="#3-4-C-算术运算发" class="headerlink" title="3.4 C++算术运算发"></a>3.4 C++算术运算发</h2><h3 id="3-4-1-运算符优先级和结合性"><a href="#3-4-1-运算符优先级和结合性" class="headerlink" title="3.4.1 运算符优先级和结合性"></a>3.4.1 运算符优先级和结合性</h3><p>和C语言差不多，没啥好讲的</p>
<h3 id="3-4-2-除法分支"><a href="#3-4-2-除法分支" class="headerlink" title="3.4.2 除法分支"></a>3.4.2 除法分支</h3><h3 id="3-4-3-求模运算"><a href="#3-4-3-求模运算" class="headerlink" title="3.4.3 求模运算"></a>3.4.3 求模运算</h3><h3 id="3-4-4-类型转换"><a href="#3-4-4-类型转换" class="headerlink" title="3.4.4 类型转换"></a>3.4.4 类型转换</h3><p>使用{}进行初始化的时候，对自动类型转换进行了限制，下面是几个例子</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228135934014.png"  ><span class="image-caption">image-20211228135934014</span></p>
<p>表达式中对short进行整型提升的时候有如下规定：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228140256232.png"  ><span class="image-caption">image-20211228140256232</span></p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228140810426.png"  ><span class="image-caption">image-20211228140810426</span></p>
<p>C++提出了自己的强制类型转换格式，如下：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228141943968.png"  ><span class="image-caption">image-20211228141943968</span></p>
<p>这样可以将基础数据类型和OOP结合的更加紧密</p>
<h3 id="3-4-5-C-11中的auto声明"><a href="#3-4-5-C-11中的auto声明" class="headerlink" title="3.4.5 C++11中的auto声明"></a>3.4.5 C++11中的auto声明</h3><p>处理复杂类型时，auto可以简化程序，如下：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211228150002410.png"  ><span class="image-caption">image-20211228150002410</span></p>
<h2 id="3-5-总结"><a href="#3-5-总结" class="headerlink" title="3.5 总结"></a>3.5 总结</h2><p>基础知识，不做进一步总结。</p>
]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer Plus Ch5</title>
    <url>/2021/12/25/C++%20Primer%20Plus%20Ch5/</url>
    <content><![CDATA[<h1 id="第5章-循环和关系表达式"><a href="#第5章-循环和关系表达式" class="headerlink" title="第5章 循环和关系表达式"></a>第5章 循环和关系表达式</h1><h2 id="5-1-for循环"><a href="#5-1-for循环" class="headerlink" title="5.1 for循环"></a>5.1 for循环</h2><h3 id="5-1-1-for循环的组成部分"><a href="#5-1-1-for循环的组成部分" class="headerlink" title="5.1.1 for循环的组成部分"></a>5.1.1 for循环的组成部分</h3><p>可以使用cout.setf(ios_base::boolalpha)来控制标准输出输出bool值的false和true，而不是1和0.</p>
<h3 id="5-1-2-回到for循环"><a href="#5-1-2-回到for循环" class="headerlink" title="5.1.2 回到for循环"></a>5.1.2 回到for循环</h3><h3 id="5-1-3-修改步长"><a href="#5-1-3-修改步长" class="headerlink" title="5.1.3 修改步长"></a>5.1.3 修改步长</h3><h3 id="5-1-4-使用for循环访问字符串"><a href="#5-1-4-使用for循环访问字符串" class="headerlink" title="5.1.4 使用for循环访问字符串"></a>5.1.4 使用for循环访问字符串</h3><h3 id="5-1-5-递增运算符（-）和递减运算符（–）"><a href="#5-1-5-递增运算符（-）和递减运算符（–）" class="headerlink" title="5.1.5 递增运算符（++）和递减运算符（–）"></a>5.1.5 递增运算符（++）和递减运算符（–）</h3><p>不要在同一条语句对同一个值递增或递减多次，可能会存在模糊不清，不同系统上的执行结果不同，如下面语句：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211230142541658.png"  ><span class="image-caption">image-20211230142541658</span></p>
<h3 id="5-1-6-副作用和顺序点"><a href="#5-1-6-副作用和顺序点" class="headerlink" title="5.1.6 副作用和顺序点"></a>5.1.6 副作用和顺序点</h3><p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211230143020910.png"  ><span class="image-caption">image-20211230143020910</span></p>
<p>这是另一个自增运算符变量更新问题的例子。</p>
<h3 id="5-1-7-前缀格式和后缀格式"><a href="#5-1-7-前缀格式和后缀格式" class="headerlink" title="5.1.7 前缀格式和后缀格式"></a>5.1.7 前缀格式和后缀格式</h3><p>对于用户定义的类型，后缀版本需要先复制一个副本，然后将复制的副本返回。因此，后缀版本比前缀版本的效率要低。</p>
<h3 id="5-1-8-递增-递减运算符和指针"><a href="#5-1-8-递增-递减运算符和指针" class="headerlink" title="5.1.8 递增/递减运算符和指针"></a>5.1.8 递增/递减运算符和指针</h3><h3 id="5-1-9-组合赋值运算符"><a href="#5-1-9-组合赋值运算符" class="headerlink" title="5.1.9 组合赋值运算符"></a>5.1.9 组合赋值运算符</h3><h3 id="5-1-10-复合语句（语句块）"><a href="#5-1-10-复合语句（语句块）" class="headerlink" title="5.1.10 复合语句（语句块）"></a>5.1.10 复合语句（语句块）</h3><h3 id="5-1-11-其他语法技巧-逗号运算符"><a href="#5-1-11-其他语法技巧-逗号运算符" class="headerlink" title="5.1.11 其他语法技巧-逗号运算符"></a>5.1.11 其他语法技巧-逗号运算符</h3><p>逗号运算符允许将两个表达式放到C++句法只允许放一个表达式的地方。</p>
<p>其次逗号运算符还将作为一个顺序点，保证先计算第一个表达式，然后计算第二个表达式。</p>
<p>C++规定，逗号表达式的值是第二部分的值</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211230151519994.png"  ><span class="image-caption">image-20211230151519994</span></p>
<h3 id="5-1-12-关系表达式"><a href="#5-1-12-关系表达式" class="headerlink" title="5.1.12 关系表达式"></a>5.1.12 关系表达式</h3><h3 id="5-1-13-赋值、比较和可能犯的错误"><a href="#5-1-13-赋值、比较和可能犯的错误" class="headerlink" title="5.1.13 赋值、比较和可能犯的错误"></a>5.1.13 赋值、比较和可能犯的错误</h3><h3 id="5-1-14-C-风格字符串的比较"><a href="#5-1-14-C-风格字符串的比较" class="headerlink" title="5.1.14 C-风格字符串的比较"></a>5.1.14 C-风格字符串的比较</h3><h3 id="5-1-15-比较string类字符串"><a href="#5-1-15-比较string类字符串" class="headerlink" title="5.1.15 比较string类字符串"></a>5.1.15 比较string类字符串</h3><h2 id="5-2-while循环"><a href="#5-2-while循环" class="headerlink" title="5.2 while循环"></a>5.2 while循环</h2><h3 id="5-2-1-for与while"><a href="#5-2-1-for与while" class="headerlink" title="5.2.1 for与while"></a>5.2.1 for与while</h3><h3 id="5-2-2-等待一段时间：编写延时循环"><a href="#5-2-2-等待一段时间：编写延时循环" class="headerlink" title="5.2.2 等待一段时间：编写延时循环"></a>5.2.2 等待一段时间：编写延时循环</h3><p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211230161833147.png"  ><span class="image-caption">image-20211230161833147</span></p>
<p>下面程序可以使用while来实现程序延迟</p>
<h2 id="5-3-do-while循环"><a href="#5-3-do-while循环" class="headerlink" title="5.3 do while循环"></a>5.3 do while循环</h2><h2 id="5-4-基于范围的for循环（C-11）"><a href="#5-4-基于范围的for循环（C-11）" class="headerlink" title="5.4 基于范围的for循环（C++11）"></a>5.4 基于范围的for循环（C++11）</h2><h2 id="5-5-循环和文本输入"><a href="#5-5-循环和文本输入" class="headerlink" title="5.5 循环和文本输入"></a>5.5 循环和文本输入</h2><h3 id="5-5-1-使用原始的cin进行输入"><a href="#5-5-1-使用原始的cin进行输入" class="headerlink" title="5.5.1 使用原始的cin进行输入"></a>5.5.1 使用原始的cin进行输入</h3><p>原始cin会忽略空格和换行符，而且发送给cin的输入被缓冲，只有用户按下回车，缓冲区的内容才会发送给程序。</p>
<h3 id="5-5-2-使用cin-get-char-进行补救"><a href="#5-5-2-使用cin-get-char-进行补救" class="headerlink" title="5.5.2 使用cin.get(char)进行补救"></a>5.5.2 使用cin.get(char)进行补救</h3><p>使用cin.get(char)函数可以处理空格和换行符以及回车。</p>
<h3 id="5-5-3-使用哪一个cin-get"><a href="#5-5-3-使用哪一个cin-get" class="headerlink" title="5.5.3 使用哪一个cin.get()"></a>5.5.3 使用哪一个cin.get()</h3><p>初步介绍了函数重载的特性，这是C++的特性</p>
<h3 id="5-5-4-文件尾条件"><a href="#5-5-4-文件尾条件" class="headerlink" title="5.5.4 文件尾条件"></a>5.5.4 文件尾条件</h3><p>可以使用键盘来模拟文件尾结束符EOF，UNIX下是Ctrl+D，Windows环境下是Ctrl+Z。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211230173057873.png"  ><span class="image-caption">image-20211230173057873</span></p>
<p>cin.clear()可以清楚EOF标记，使输入可以继续进行。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211230183700096.png"  ><span class="image-caption">image-20211230183700096</span></p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20211230185920118.png"  ><span class="image-caption">image-20211230185920118</span></p>
<p>ifstream类提供了一个可以将istream对象（如cin）转换为bool值的函数；当cin出现在需要bool值的地方（如在while循环的测试条件中）时，该转换函数将被调用。而且这种转换比cin.fail()或cin.eof()更为通用，因为它可以检测到其他失败的原因，如磁盘故障。</p>
<h3 id="5-5-5-另一个cin-get-版本"><a href="#5-5-5-另一个cin-get-版本" class="headerlink" title="5.5.5 另一个cin.get()版本"></a>5.5.5 另一个cin.get()版本</h3><p>ch = cin.get()和cout.put()</p>
<h2 id="5-6-嵌套循环和二维数组"><a href="#5-6-嵌套循环和二维数组" class="headerlink" title="5.6 嵌套循环和二维数组"></a>5.6 嵌套循环和二维数组</h2><h3 id="5-6-1-初始化二维数组"><a href="#5-6-1-初始化二维数组" class="headerlink" title="5.6.1 初始化二维数组"></a>5.6.1 初始化二维数组</h3><h3 id="5-6-2-使用二维数组"><a href="#5-6-2-使用二维数组" class="headerlink" title="5.6.2 使用二维数组"></a>5.6.2 使用二维数组</h3><h2 id="5-7-总结"><a href="#5-7-总结" class="headerlink" title="5.7 总结"></a>5.7 总结</h2>]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer Plus Ch6</title>
    <url>/2021/12/25/C++%20Primer%20Plus%20Ch6/</url>
    <content><![CDATA[<h1 id="第6章-分支语句和逻辑运算符"><a href="#第6章-分支语句和逻辑运算符" class="headerlink" title="第6章 分支语句和逻辑运算符"></a>第6章 分支语句和逻辑运算符</h1><h2 id="6-1-if语句"><a href="#6-1-if语句" class="headerlink" title="6.1 if语句"></a>6.1 if语句</h2><h3 id="6-1-1-if-else语句"><a href="#6-1-1-if-else语句" class="headerlink" title="6.1.1 if else语句"></a>6.1.1 if else语句</h3><h3 id="6-1-2-格式化if-else语句"><a href="#6-1-2-格式化if-else语句" class="headerlink" title="6.1.2 格式化if else语句"></a>6.1.2 格式化if else语句</h3><h3 id="6-1-3-if-else-if-else结构"><a href="#6-1-3-if-else-if-else结构" class="headerlink" title="6.1.3 if else if else结构"></a>6.1.3 if else if else结构</h3><p>条件运算符防止将==写成=的小技巧：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220102203428227.png"  ><span class="image-caption">image-20220102203428227</span></p>
<h2 id="6-2-逻辑表达式"><a href="#6-2-逻辑表达式" class="headerlink" title="6.2 逻辑表达式"></a>6.2 逻辑表达式</h2><h3 id="6-2-1-逻辑OR运算符："><a href="#6-2-1-逻辑OR运算符：" class="headerlink" title="6.2.1 逻辑OR运算符：||"></a>6.2.1 逻辑OR运算符：||</h3><p>||是顺序运算符，从左到右的顺序计算表达式</p>
<h3 id="6-2-2-逻辑AND运算符：-amp-amp"><a href="#6-2-2-逻辑AND运算符：-amp-amp" class="headerlink" title="6.2.2 逻辑AND运算符：&amp;&amp;"></a>6.2.2 逻辑AND运算符：&amp;&amp;</h3><h3 id="6-2-3-用-amp-amp-来设置取值范围"><a href="#6-2-3-用-amp-amp-来设置取值范围" class="headerlink" title="6.2.3 用&amp;&amp;来设置取值范围"></a>6.2.3 用&amp;&amp;来设置取值范围</h3><p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220102205542844.png"  ><span class="image-caption">image-20220102205542844</span></p>
<p>可以通过这个例子来进一步理解C++中的运算符结合律</p>
<h3 id="6-2-4-逻辑NOT运算符：！"><a href="#6-2-4-逻辑NOT运算符：！" class="headerlink" title="6.2.4 逻辑NOT运算符：！"></a>6.2.4 逻辑NOT运算符：！</h3><p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220102205824175.png"  ><span class="image-caption">image-20220102205824175</span></p>
<h3 id="6-2-5-逻辑运算符细节"><a href="#6-2-5-逻辑运算符细节" class="headerlink" title="6.2.5 逻辑运算符细节"></a>6.2.5 逻辑运算符细节</h3><p>！运算符的优先级高于所有关系运算符和算术运算符。</p>
<p>&amp;&amp;优先级高于||</p>
<h3 id="6-2-6-其他表示方式"><a href="#6-2-6-其他表示方式" class="headerlink" title="6.2.6 其他表示方式"></a>6.2.6 其他表示方式</h3><p>可以用and, or ,not来替代&amp;&amp;,||和!。如果是C语言，还需要包含头文件iso646.h。</p>
<h2 id="6-3-字符函数库cctype"><a href="#6-3-字符函数库cctype" class="headerlink" title="6.3 字符函数库cctype"></a>6.3 字符函数库cctype</h2><p>一个从C语言继承的与字符相关的函数软件包，用来简化确定字符是否是大写字母、数字、标点符号等工作，这些函数的原型在头文件cctype中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// cctypes.cpp -- using the ctype.h library</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span>              <span class="comment">// prototypes for character functions</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter text for analysis, and type @&quot;</span></span><br><span class="line">            <span class="string">&quot; to terminate input.\n&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> ch;  </span><br><span class="line">    <span class="keyword">int</span> whitespace = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> digits = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> chars = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> punct = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> others = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    cin.<span class="built_in">get</span>(ch);                <span class="comment">// get first character</span></span><br><span class="line">    <span class="keyword">while</span> (ch != <span class="string">&#x27;@&#x27;</span>)            <span class="comment">// test for sentinel</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isalpha</span>(ch))         <span class="comment">// is it an alphabetic character?</span></span><br><span class="line">            chars++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isspace</span>(ch))    <span class="comment">// is it a whitespace character?</span></span><br><span class="line">            whitespace++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isdigit</span>(ch))    <span class="comment">// is it a digit?</span></span><br><span class="line">            digits++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">ispunct</span>(ch))    <span class="comment">// is it punctuation?</span></span><br><span class="line">            punct++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            others++;</span><br><span class="line">        cin.<span class="built_in">get</span>(ch);            <span class="comment">// get next character</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; chars &lt;&lt; <span class="string">&quot; letters, &quot;</span></span><br><span class="line">         &lt;&lt; whitespace &lt;&lt; <span class="string">&quot; whitespace, &quot;</span></span><br><span class="line">         &lt;&lt; digits &lt;&lt; <span class="string">&quot; digits, &quot;</span></span><br><span class="line">         &lt;&lt; punct &lt;&lt; <span class="string">&quot; punctuations, &quot;</span></span><br><span class="line">         &lt;&lt; others &lt;&lt; <span class="string">&quot; others.\n&quot;</span>;</span><br><span class="line">    <span class="comment">// cin.get();</span></span><br><span class="line">    <span class="comment">// cin.get();</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-4-运算符"><a href="#6-4-运算符" class="headerlink" title="6.4 ?: 运算符"></a>6.4 ?: 运算符</h2><h2 id="6-5-switch语句"><a href="#6-5-switch语句" class="headerlink" title="6.5 switch语句"></a>6.5 switch语句</h2><p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220103201501186.png"  ><span class="image-caption">image-20220103201501186</span></p>
<h3 id="6-5-1-将枚举量用作标签"><a href="#6-5-1-将枚举量用作标签" class="headerlink" title="6.5.1 将枚举量用作标签"></a>6.5.1 将枚举量用作标签</h3><h3 id="6-5-2-switch和if-else"><a href="#6-5-2-switch和if-else" class="headerlink" title="6.5.2 switch和if else"></a>6.5.2 switch和if else</h3><p>switch标签必须是整数或者枚举量</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220103203444888.png"  ><span class="image-caption">image-20220103203444888</span></p>
<h2 id="6-6-break和continue语句"><a href="#6-6-break和continue语句" class="headerlink" title="6.6 break和continue语句"></a>6.6 break和continue语句</h2><h2 id="6-7-读取数字的循环"><a href="#6-7-读取数字的循环" class="headerlink" title="6.7 读取数字的循环"></a>6.7 读取数字的循环</h2><h2 id="6-8-简单文件输入-输出"><a href="#6-8-简单文件输入-输出" class="headerlink" title="6.8 简单文件输入/输出"></a>6.8 简单文件输入/输出</h2><h3 id="6-8-1-文件I-O和文本文件"><a href="#6-8-1-文件I-O和文本文件" class="headerlink" title="6.8.1 文件I/O和文本文件"></a>6.8.1 文件I/O和文本文件</h3><p>使用cin进行输入时，程序将输入视为一系列的字节，其中每个字节都被解释为字符编码。这里很重要，不管目标数据类型是什么，输入一开始都是字符数据——文本数据。</p>
<h3 id="6-8-2-写入到文本文件中"><a href="#6-8-2-写入到文本文件中" class="headerlink" title="6.8.2 写入到文本文件中"></a>6.8.2 写入到文本文件中</h3><h3 id="6-8-3-读取文件文本"><a href="#6-8-3-读取文件文本" class="headerlink" title="6.8.3 读取文件文本"></a>6.8.3 读取文件文本</h3><h2 id="6-9-总结"><a href="#6-9-总结" class="headerlink" title="6.9 总结"></a>6.9 总结</h2>]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer Plus Ch7</title>
    <url>/2021/12/25/C++%20Primer%20Plus%20Ch7/</url>
    <content><![CDATA[<h1 id="第7章-函数——C-的编程模块"><a href="#第7章-函数——C-的编程模块" class="headerlink" title="第7章 函数——C++的编程模块"></a>第7章 函数——C++的编程模块</h1><h2 id="7-1-复习函数的基本知识"><a href="#7-1-复习函数的基本知识" class="headerlink" title="7.1 复习函数的基本知识"></a>7.1 复习函数的基本知识</h2><h3 id="7-1-1-定义函数"><a href="#7-1-1-定义函数" class="headerlink" title="7.1.1 定义函数"></a>7.1.1 定义函数</h3><p>C++对于返回值的类型有一定的限制：不能是数组，但可以是其他任何类型——整数、浮点数、指针，甚至可以是结构和对象。（虽然C++函数不能直接返回数组，但可以将数组作为结构或对象组成部分来返回）</p>
<h3 id="7-1-2-函数原型和函数调用"><a href="#7-1-2-函数原型和函数调用" class="headerlink" title="7.1.2 函数原型和函数调用"></a>7.1.2 函数原型和函数调用</h3><p>避免使用函数原型的唯一方法时，在首次使用函数之前定义它。</p>
<p>原型定义中的变量名可以省略</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220104103508777.png"  ><span class="image-caption">image-20220104103508777</span></p>
<h2 id="7-2-函数参数和按值传递"><a href="#7-2-函数参数和按值传递" class="headerlink" title="7.2 函数参数和按值传递"></a>7.2 函数参数和按值传递</h2><h3 id="7-2-1-多个参数"><a href="#7-2-1-多个参数" class="headerlink" title="7.2.1 多个参数"></a>7.2.1 多个参数</h3><h3 id="7-2-2-另外一个接受两个参数的函数"><a href="#7-2-2-另外一个接受两个参数的函数" class="headerlink" title="7.2.2 另外一个接受两个参数的函数"></a>7.2.2 另外一个接受两个参数的函数</h3><h2 id="7-3-函数和数组"><a href="#7-3-函数和数组" class="headerlink" title="7.3 函数和数组"></a>7.3 函数和数组</h2><h3 id="7-3-1-函数如何使用指针来处理数组"><a href="#7-3-1-函数如何使用指针来处理数组" class="headerlink" title="7.3.1 函数如何使用指针来处理数组"></a>7.3.1 函数如何使用指针来处理数组</h3><h3 id="7-3-2-将数组作为参数意味着什么"><a href="#7-3-2-将数组作为参数意味着什么" class="headerlink" title="7.3.2 将数组作为参数意味着什么"></a>7.3.2 将数组作为参数意味着什么</h3><p>当用数组作为参数时，实际上时数组对应类型的指针作为参数，当对这个参数使用sizeof时，返回的时指针的大小，而不是数组的大小</p>
<h3 id="7-3-3-更多数组函数示例"><a href="#7-3-3-更多数组函数示例" class="headerlink" title="7.3.3 更多数组函数示例"></a>7.3.3 更多数组函数示例</h3><p>使用const关键字可以防止函数对指针参数的值修改如</p>
<p>const double *ar可以防止函数使用ar对内容进行修改</p>
<h3 id="7-3-4-使用数组区间的函数"><a href="#7-3-4-使用数组区间的函数" class="headerlink" title="7.3.4 使用数组区间的函数"></a>7.3.4 使用数组区间的函数</h3><h3 id="7-3-5-指针和constant"><a href="#7-3-5-指针和constant" class="headerlink" title="7.3.5 指针和constant"></a>7.3.5 指针和constant</h3><p>可以用两种不同的方式将const关键字用于指针。第一种方法是让指针指向一个常量对象，这样可以防止使用该指针来修改所指向的值，第二种方法是将指针本身声明为常量，这样可以防止改变指针指向的位置。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220104125242754.png"  ><span class="image-caption">image-20220104125242754</span></p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220104125455394.png"  ><span class="image-caption">image-20220104125455394</span></p>
<p>仅当只有一层间接关系（如指针指向基本数据类型）时，才可以将非const地址或指针赋给constant指针。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220104130939017.png"  ><span class="image-caption">image-20220104130939017</span></p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220104131519386.png"  ><span class="image-caption">image-20220104131519386</span></p>
<p>int * const finger可以防止修改指针finger，但finger指向的内容可以被修改。</p>
<h2 id="7-4-函数和二维数组"><a href="#7-4-函数和二维数组" class="headerlink" title="7.4 函数和二维数组"></a>7.4 函数和二维数组</h2><h2 id="7-5-函数和C-风格字符串"><a href="#7-5-函数和C-风格字符串" class="headerlink" title="7.5 函数和C-风格字符串"></a>7.5 函数和C-风格字符串</h2><h3 id="7-5-1-将C-风格字符串作为参数的函数"><a href="#7-5-1-将C-风格字符串作为参数的函数" class="headerlink" title="7.5.1 将C-风格字符串作为参数的函数"></a>7.5.1 将C-风格字符串作为参数的函数</h3><h2 id="7-6-函数和结构"><a href="#7-6-函数和结构" class="headerlink" title="7.6 函数和结构"></a>7.6 函数和结构</h2><h3 id="7-6-1-传递和返回结构"><a href="#7-6-1-传递和返回结构" class="headerlink" title="7.6.1 传递和返回结构"></a>7.6.1 传递和返回结构</h3><h3 id="7-6-2-另一个处理结构的函数示例"><a href="#7-6-2-另一个处理结构的函数示例" class="headerlink" title="7.6.2 另一个处理结构的函数示例"></a>7.6.2 另一个处理结构的函数示例</h3><h3 id="7-6-3-传递结构的地址"><a href="#7-6-3-传递结构的地址" class="headerlink" title="7.6.3 传递结构的地址"></a>7.6.3 传递结构的地址</h3><h2 id="7-7-函数和string对象"><a href="#7-7-函数和string对象" class="headerlink" title="7.7 函数和string对象"></a>7.7 函数和string对象</h2><h2 id="7-8-函数与array对象"><a href="#7-8-函数与array对象" class="headerlink" title="7.8 函数与array对象"></a>7.8 函数与array对象</h2><h2 id="7-9-递归"><a href="#7-9-递归" class="headerlink" title="7.9 递归"></a>7.9 递归</h2><h3 id="7-9-1-包含一个递归调用的递归"><a href="#7-9-1-包含一个递归调用的递归" class="headerlink" title="7.9.1 包含一个递归调用的递归"></a>7.9.1 包含一个递归调用的递归</h3><h3 id="7-9-2-包含多个递归调用的递归"><a href="#7-9-2-包含多个递归调用的递归" class="headerlink" title="7.9.2 包含多个递归调用的递归"></a>7.9.2 包含多个递归调用的递归</h3><h2 id="7-10-函数指针"><a href="#7-10-函数指针" class="headerlink" title="7.10 函数指针"></a>7.10 函数指针</h2><h3 id="7-10-1-函数指针的基础知识"><a href="#7-10-1-函数指针的基础知识" class="headerlink" title="7.10.1 函数指针的基础知识"></a>7.10.1 函数指针的基础知识</h3><p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220104152427893.png"  ><span class="image-caption">image-20220104152427893</span></p>
<p>如何使用函数指针调用被指向的函数？</p>
<p>两种方式：</p>
<p>①<img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220104152715529.png"  ><span class="image-caption">image-20220104152715529</span></p>
<p>②<img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220104152731003.png"  ><span class="image-caption">image-20220104152731003</span></p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220104152903380.png"  ><span class="image-caption">image-20220104152903380</span></p>
<h3 id="7-10-2-函数指针示例"><a href="#7-10-2-函数指针示例" class="headerlink" title="7.10.2 函数指针示例"></a>7.10.2 函数指针示例</h3><h3 id="7-10-3-深入探讨函数指针"><a href="#7-10-3-深入探讨函数指针" class="headerlink" title="7.10.3 深入探讨函数指针"></a>7.10.3 深入探讨函数指针</h3><p>这里深入讨论了指向函数指针数组的指针，多以例子形式给出，不再一一列举。</p>
<h3 id="7-10-4-使用typedef进行简化"><a href="#7-10-4-使用typedef进行简化" class="headerlink" title="7.10.4 使用typedef进行简化"></a>7.10.4 使用typedef进行简化</h3><p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220104162541697.png"  ><span class="image-caption">image-20220104162541697</span></p>
<p>这里可将p_fun声明为函数指针类型的别名，可以明显的简化代码，很好的一个工具。</p>
<h2 id="7-11-总结"><a href="#7-11-总结" class="headerlink" title="7.11 总结"></a>7.11 总结</h2>]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer Plus Ch8</title>
    <url>/2021/12/25/C++%20Primer%20Plus%20Ch8/</url>
    <content><![CDATA[<h1 id="第8章-函数探幽"><a href="#第8章-函数探幽" class="headerlink" title="第8章 函数探幽"></a>第8章 函数探幽</h1><h2 id="8-1-C-内联函数"><a href="#8-1-C-内联函数" class="headerlink" title="8.1 C++内联函数"></a>8.1 C++内联函数</h2><p>是C++为提高程序运行速度所做的一项改进。程序无需跳到另一个位置执行，再跳回来。代价是需要占用更多内存，因为要在每个调用函数的地方插入一个函数代码的副本。对于经常被调用且代码执行时间很短的函数，可以考虑将其变成内联函数。</p>
<p><strong>内联函数不能是递归函数</strong></p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220106135648219.png"  ><span class="image-caption">image-20220106135648219</span></p>
<p>通常的做法是省略原型，将整个定义（即函数头和所有函数代码）放在本应提供原型的地方。</p>
<p>有些编译器会自己决定是否实现用户的内联函数要求。</p>
<p>如果使用C语言的宏执行了类似函数的功能，应考虑将它们转换为C++内联函数。</p>
<h2 id="8-2-引用变量"><a href="#8-2-引用变量" class="headerlink" title="8.2 引用变量"></a>8.2 引用变量</h2><h3 id="8-2-1-创建引用变量"><a href="#8-2-1-创建引用变量" class="headerlink" title="8.2.1 创建引用变量"></a>8.2.1 创建引用变量</h3><p>必须再声明引用变量的同时进行初始化</p>
<h3 id="8-2-2-将引用用作函数参数"><a href="#8-2-2-将引用用作函数参数" class="headerlink" title="8.2.2 将引用用作函数参数"></a>8.2.2 将引用用作函数参数</h3><h3 id="8-2-3-引用的属性和特别之处"><a href="#8-2-3-引用的属性和特别之处" class="headerlink" title="8.2.3 引用的属性和特别之处"></a>8.2.3 引用的属性和特别之处</h3><p>如果不想在函数中修改引用，可以声明称常量引用</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220106143316537.png"  ><span class="image-caption">image-20220106143316537</span></p>
<p>如果是常量引用参数，会根据情况创建临时变量，但如果是一般的引用参数，会禁止创建临时变量。这事因为对于一般引用参数，函数的意图是修改这些引用对应的变量的内容，而创建临时变量无法达到这个意图。</p>
<p>如果函数只是使用传递的值而不是修改它们，临时变量会让可处理的参数种类更加通用。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220106144945677.png"  ><span class="image-caption">image-20220106144945677</span></p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220106145002162.png"  ><span class="image-caption">image-20220106145002162</span></p>
<p>右值引用可以引用右值，如表达式或常量</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220106145220097.png"  ><span class="image-caption">image-20220106145220097</span></p>
<h3 id="8-2-4-将引用用于结构"><a href="#8-2-4-将引用用于结构" class="headerlink" title="8.2.4 将引用用于结构"></a>8.2.4 将引用用于结构</h3><p>引用非常适用于结构和类（C++的用户定义类型）。引入引用主要是为了用于这些类型的，而不是基本的内置类型。</p>
<p>引用还可以作为返回类型</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220106151537357.png"  ><span class="image-caption">image-20220106151537357</span></p>
<p>返回引用时需要注意的问题：</p>
<p>不要返回临时变量的引用</p>
<p>还可以将返回值声明为const引用，这样就不能修改返回值了</p>
<p>应尽可能编写清晰，限制严格的代码，减少犯错的可能性</p>
<h3 id="8-2-5-将引用用于类对象"><a href="#8-2-5-将引用用于类对象" class="headerlink" title="8.2.5 将引用用于类对象"></a>8.2.5 将引用用于类对象</h3><h3 id="8-2-6-对象、继承和引用"><a href="#8-2-6-对象、继承和引用" class="headerlink" title="8.2.6 对象、继承和引用"></a>8.2.6 对象、继承和引用</h3><h3 id="8-2-7-何时使用引用参数"><a href="#8-2-7-何时使用引用参数" class="headerlink" title="8.2.7 何时使用引用参数"></a>8.2.7 何时使用引用参数</h3><h2 id="8-3-默认参数"><a href="#8-3-默认参数" class="headerlink" title="8.3 默认参数"></a>8.3 默认参数</h2><p>对于带参数列表的函数，必须从右向左添加默认值。也就是说，要为某个参数设置默认值，则必须为它右边的所有参数提供默认值：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220106160740388.png"  ><span class="image-caption">image-20220106160740388</span></p>
<p>注意，只有原型指定了默认值，函数定义与没有默认参数时完全相同。</p>
<h2 id="8-4-函数重载"><a href="#8-4-函数重载" class="headerlink" title="8.4 函数重载"></a>8.4 函数重载</h2><p>在有多个函数满足匹配要求时，函数匹配遵循最佳匹配原则</p>
<h3 id="8-4-1-重载示例"><a href="#8-4-1-重载示例" class="headerlink" title="8.4.1 重载示例"></a>8.4.1 重载示例</h3><h3 id="8-4-2-何时使用函数重载"><a href="#8-4-2-何时使用函数重载" class="headerlink" title="8.4.2 何时使用函数重载"></a>8.4.2 何时使用函数重载</h3><p>对功能类似，使用不同形式的函数进行重载，但不要滥用重载。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220106195036630.png"  ><span class="image-caption">image-20220106195036630</span></p>
<h2 id="8-4-函数模板"><a href="#8-4-函数模板" class="headerlink" title="8.4 函数模板"></a>8.4 函数模板</h2><p>函数模板允许以任意类型的方式来定义函数。下面是一个交换两个变量的模板的例子</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220106195624864.png"  ><span class="image-caption">image-20220106195624864</span></p>
<p>在标准C++98中的没有typename关键字，使用class关键字，如下：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220106195836679.png"  ><span class="image-caption">image-20220106195836679</span></p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220106195922025.png"  ><span class="image-caption">image-20220106195922025</span></p>
<p>使用模板并不会减少函数的数量，而是让生成多个函数定义变得更简单、更可靠。</p>
<h3 id="8-5-1-重载的模板"><a href="#8-5-1-重载的模板" class="headerlink" title="8.5.1 重载的模板"></a>8.5.1 重载的模板</h3><p>需要多个对不同类型使用同一种算法的函数时，可使用模板。然而，并非所有的类型都是用相同的算法。为满足这种需求，可以像重载常规函数定义那样重载模板定义。</p>
<h3 id="8-5-2-模板的局限性"><a href="#8-5-2-模板的局限性" class="headerlink" title="8.5.2 模板的局限性"></a>8.5.2 模板的局限性</h3><p>有些类型可以执行一些操作，但有些类型却不行。</p>
<h3 id="8-5-3-显式具体化"><a href="#8-5-3-显式具体化" class="headerlink" title="8.5.3 显式具体化"></a>8.5.3 显式具体化</h3><p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220107122239737.png"  ><span class="image-caption">image-20220107122239737</span></p>
<p>这里的优先级很关键，非模板函数优先级最高。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220107122518481.png"  ><span class="image-caption">image-20220107122518481</span></p>
<p>具体化形式如上</p>
<h3 id="8-5-4-实例化和具体化"><a href="#8-5-4-实例化和具体化" class="headerlink" title="8.5.4 实例化和具体化"></a>8.5.4 实例化和具体化</h3><p>可以显式实例化函数定义，下面是个例子。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220107123407621.png"  ><span class="image-caption">image-20220107123407621</span></p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220107123718162.png"  ><span class="image-caption">image-20220107123718162</span></p>
<p>显式具体化和显式实例化看来不是一个意思。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220107124218821.png"  ><span class="image-caption">image-20220107124218821</span></p>
<p>这个例子说明可以人为指定具体的实例化类型。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220107124355372.png"  ><span class="image-caption">image-20220107124355372</span></p>
<h3 id="8-5-5-编译器选择使用哪个函数版本"><a href="#8-5-5-编译器选择使用哪个函数版本" class="headerlink" title="8.5.5 编译器选择使用哪个函数版本"></a>8.5.5 编译器选择使用哪个函数版本</h3><p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220107130149275.png"  ><span class="image-caption">image-20220107130149275</span></p>
<p>如果只有#3和#4的话会优先匹配#3，因为#3没有const。但这种情况只适用于指针和引用。</p>
<p>实际就是找出哪个函数原型更加具体。书中讲了一些细节，但我们在自己编程的时候需要具体情况具体分析。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220107143015643.png"  ><span class="image-caption">image-20220107143015643</span></p>
<h3 id="8-5-6-模板函数的发展"><a href="#8-5-6-模板函数的发展" class="headerlink" title="8.5.6 模板函数的发展"></a>8.5.6 模板函数的发展</h3><p>C++11提供了关键字decltype来解决运行时的类型问题</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220107143343361.png"  ><span class="image-caption">image-20220107143343361</span></p>
<p>decltype会包含&amp;、const等限定符</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220107143813864.png"  ><span class="image-caption">image-20220107143813864</span></p>
<p>对于用括号括起来的情况，这就变成了相应的引用类型了。</p>
<p>还可以结合使用typedef和decltype，下面这个例子：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220107143950082.png"  ><span class="image-caption">image-20220107143950082</span></p>
<p>如果无法预知模板函数的返回类型，可以使用后置返回类型</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220107144143903.png"  ><span class="image-caption">image-20220107144143903</span></p>
]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>失眠随笔</title>
    <url>/2021/12/25/Essay1/</url>
    <content><![CDATA[<p>现在是12月25号的凌晨3：15，已经连续两天半夜失眠了。反思最近的生活，一直陷在一种浑浑噩噩的状态中，白天效率低下，到了夜里又总会胡思乱想，为自己的不思进取感到焦虑。时长怀念18年的那个大二，那时候的生活总是可控的，我很喜欢那种一切井井有条的感觉。但不知道什么时候开始，生活开始脱轨，对工作和学习也失去了热情，甚至产生了逃避的心理。我不知道这种局面如何破局，只能寄希望于某个奇妙的节点，自己能够重燃对生活的热情吧。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer Plus Ch9</title>
    <url>/2021/12/25/C++%20Primer%20Plus%20Ch9/</url>
    <content><![CDATA[<h1 id="第9章-内存模型和名称空间"><a href="#第9章-内存模型和名称空间" class="headerlink" title="第9章 内存模型和名称空间"></a>第9章 内存模型和名称空间</h1><h2 id="9-1-单独编译"><a href="#9-1-单独编译" class="headerlink" title="9.1 单独编译"></a>9.1 单独编译</h2><p>C++允许程序员将文件单独编译，然后再使用链接器将编译好的文件链接成可执行程序。</p>
<p>C++提供了#include，将结构的声明放到头文件中，然后在每个源码中包含该头文件。这样，当需要修改结构声明时，只需要在头文件中做一次修改即可。另外也可以将函数原型放在头文件中。因此原来的程序可以分成三个部分。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220109152339862.png"  ><span class="image-caption">image-20220109152339862</span></p>
<p>这里由两个源代码文件，其中第一个是和头文件一一对应的，用来实现在头文件中的相关函数原型。他和头文件组成了一个软件包，可用于各种程序中。</p>
<p><strong>请不要将函数定义或变量声明放到头文件中。这样做对于简单的情况可能是可行的，但通常会引来麻烦。例如，如果在头文件包含一个函数定义，然后在其他两个文件（属于同一个程序）中包含该头文件，则同一个程序中包含同一个函数的两个定义，除非函数是内联的，否则这将出错</strong></p>
<p>ps: 之前帮学姐写程序时，好像有过在头文件中定义函数，现在想想感觉极其不专业。</p>
<p>下面列出头文件中常包含的内容：</p>
<ul>
<li>函数原型</li>
<li>使用#define或const定义的符号常量</li>
<li>结构声明</li>
<li>类声明</li>
<li>模板声明</li>
<li>内联函数</li>
</ul>
<p>包含自己定义的头文件时要使用””，&lt;&gt;会让编译器在标准头文件中去寻找相应的文件。</p>
<p>同一个文件中只能将同一个头文件包含一次。但很容易在不知情的情况下将头文件包含多次。可以使用#ifndef（即if not defined）来解决重复包含的问题。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220109155911752.png"  ><span class="image-caption">image-20220109155911752</span></p>
<p>只有在没有#define过COORDINH时，才处理#define和#endif之间的语句</p>
<p>虽然我们根据文件进行单独编译，但其实更通用的术语是翻译单元，文件并不是计算机组织信息的唯一方式。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220109160751968.png"  ><span class="image-caption">image-20220109160751968</span></p>
<h2 id="9-2-存储持续性、作用域和链接性"><a href="#9-2-存储持续性、作用域和链接性" class="headerlink" title="9.2 存储持续性、作用域和链接性"></a>9.2 存储持续性、作用域和链接性</h2><p>总结一下C++中四种存储数据的方案。</p>
<ul>
<li>自动存储持续性：在函数定义中声明的变量（包括函数参数）的存储持续性为自动的。它们在程序开始执行其所属的函数或代码块时被创建，在执行完函数或代码块时，它们使用的内存被释放。C++有两种存储持续性为自动的变量。</li>
<li>静态存储持续性：在函数定义外定义的变量和使用关键字static定义的变量的存储持续性都为静态。它们在程序整个运行过程中都存在。C++有3中存储持续性为静态的变量。</li>
<li>线程存储持续性（C++11）：当前，多核处理器很常见，这些CPU可同时处理多个执行任务。这让程序能够将计算放在可并行处理的不同线程中。如果变量是使用关键字thread_local声明的，则其生命周期与所属的线程一样长。</li>
<li>动态存储持续性：用new运算符分配的内存将一直存在，直到使用delete运算符将其释放或程序结束为止。这种内存的存储持续性为动态，有时被称为自由存储或堆。</li>
</ul>
<h3 id="9-2-1-作用域和链接"><a href="#9-2-1-作用域和链接" class="headerlink" title="9.2.1 作用域和链接"></a>9.2.1 作用域和链接</h3><p>自动变量的作用域为局部，静态变量的作用域是全局还是局部取决于它是如何被定义的。</p>
<h3 id="9-2-2-自动存储连续性"><a href="#9-2-2-自动存储连续性" class="headerlink" title="9.2.2 自动存储连续性"></a>9.2.2 自动存储连续性</h3><p>关键字register最初由C语言引入，它建议编译器使用CPU寄存器来存储自动变量：register int count_fast;</p>
<p>这旨在提高访问变量的速度。但在C++11中，这种提示作用失效了，使用它的唯一原因是指出程序员想使用一个自动变量。</p>
<h3 id="9-2-3-静态持续变量"><a href="#9-2-3-静态持续变量" class="headerlink" title="9.2.3 静态持续变量"></a>9.2.3 静态持续变量</h3><p>C++为静态存储持续性提供了3种链接性：外部链接性（可在其他文件中访问）、内部链接性（只能在当前文件中访问）和无链接性（只能在当前函数或代码块中访问）。</p>
<p>如果没有显示的初始化静态变量，编译器将把它设置为0.默认情况下，静态数组和结构将每个元素或成员的所有位都设置为0.</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220109204907448.png"  ><span class="image-caption">image-20220109204907448</span></p>
<p>要想只在文件中可见或代码块中可见，需要加关键字static</p>
<p>对于常量表达式初始化，会在编译完成后就完成初始化。</p>
<p>C++11新增了关键字constexpr，这增加了创建常量表达式的方式</p>
<h3 id="9-2-4-静态持续性、外部链接性"><a href="#9-2-4-静态持续性、外部链接性" class="headerlink" title="9.2.4 静态持续性、外部链接性"></a>9.2.4 静态持续性、外部链接性</h3><h4 id="1-单定义规则"><a href="#1-单定义规则" class="headerlink" title="1.单定义规则"></a>1.单定义规则</h4><p>如果要在多个文件中使用外部变量，只需要在一个文件中包含该变量的定义（形如extern char gr = ‘z’或int dog），但在使用该变量的所有文件中，都必须使用关键字extern声明它（如extern char gr或extern int dog）。</p>
<p>C++提供了作用域解析运算符（::）。放在变量名前面时，该运算符表示使用变量的全局版本。</p>
<h3 id="9-2-5-静态持续性、内部链接性"><a href="#9-2-5-静态持续性、内部链接性" class="headerlink" title="9.2.5 静态持续性、内部链接性"></a>9.2.5 静态持续性、内部链接性</h3><p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220109213149343.png"  ><span class="image-caption">image-20220109213149343</span></p>
<h3 id="9-2-6-静态存储持续性、无链接性"><a href="#9-2-6-静态存储持续性、无链接性" class="headerlink" title="9.2.6 静态存储持续性、无链接性"></a>9.2.6 静态存储持续性、无链接性</h3><h3 id="9-2-7-说明符和限定符"><a href="#9-2-7-说明符和限定符" class="headerlink" title="9.2.7 说明符和限定符"></a>9.2.7 说明符和限定符</h3><p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220109215740362.png"  ><span class="image-caption">image-20220109215740362</span></p>
<p>在同一个声明中不能使用多个说明符，但thread_local除外，它可与static或extern结合使用。关键字mutable的含义将根据const来解释，因此先来介绍cv-限定符，然后再解释它。</p>
<h4 id="1-cv-限定符"><a href="#1-cv-限定符" class="headerlink" title="1. cv-限定符"></a>1. cv-限定符</h4><p>下面就是cv限定符</p>
<ul>
<li>const</li>
<li>volatile（易失的）</li>
</ul>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220109220651922.png"  ><span class="image-caption">image-20220109220651922</span></p>
<p>我个人理解是维护了变量的一致性？有的变量可能和硬件关联，比如int a = b + b;</p>
<p>b和硬件接口关联，那么在一个表达式中b的值可能不同，用volatile让b缓存下来，不要查询两次b的值。</p>
<h4 id="2-mutable（可变的）"><a href="#2-mutable（可变的）" class="headerlink" title="2. mutable（可变的）"></a>2. mutable（可变的）</h4><p>使用mutable可以指出，即使结构（或类）变量为const,其某个成员也可以被修改。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220110093127552.png"  ><span class="image-caption">image-20220110093127552</span></p>
<p>如上，可以对const结构变量veep的accesses进行修改。</p>
<h4 id="3-再谈const"><a href="#3-再谈const" class="headerlink" title="3. 再谈const"></a>3. 再谈const</h4><p>在默认情况下全局变量的链接性为外部的，但const全局变量的链接性为内部的。也就是说。在C++看来，全局const定义就像使用了static说明符一样。</p>
<p>如果想让某个常量的链接性为外部的，则可以使用extern关键字来覆盖默认的内部链接性</p>
<p>extern const int states = 50;</p>
<p>在这种情况下，必须在所有使用该常量的文件中使用extern关键字来声明它。</p>
<p>在函数和代码块中声明const时，其作用域为代码块。</p>
<h3 id="9-2-8-函数和链接性"><a href="#9-2-8-函数和链接性" class="headerlink" title="9.2.8 函数和链接性"></a>9.2.8 函数和链接性</h3><p>所有函数的存储连续性都为静态的，即在整个程序执行期间都一直存在。默认情况下，函数的链接性为外部的，即可以在文件间共享。还可以使用关键字static将函数的链接性设置为内部的，使之只能在一个文件中使用。必须同时在原型和函数定义中使用该关键字：</p>
<p>单定义规则也适用于非内联函数，因此对于每个非内联函数，程序只能包含一个定义。</p>
<h3 id="9-2-9-语言链接性"><a href="#9-2-9-语言链接性" class="headerlink" title="9.2.9 语言链接性"></a>9.2.9 语言链接性</h3><p>函数名都有自己的符号名称，C语言和C++中对符号名称的生成规则不同，因为C++有函数重载，如果想用C语言的符号名称规则，可以用函数原型来指出要使用的约定</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220110101653049.png"  ><span class="image-caption">image-20220110101653049</span></p>
<h3 id="9-2-10-存储方案和动态分配"><a href="#9-2-10-存储方案和动态分配" class="headerlink" title="9.2.10 存储方案和动态分配"></a>9.2.10 存储方案和动态分配</h3><p>编译器使用三块独立的内存：一块用于静态变量（可能再细分），一块用于自动变量，另一块用于动态存储。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220110102428637.png"  ><span class="image-caption">image-20220110102428637</span></p>
<h4 id="1-使用new运算符初始化"><a href="#1-使用new运算符初始化" class="headerlink" title="1. 使用new运算符初始化"></a>1. 使用new运算符初始化</h4><p>new初始化结构需要使用大括号的列表初始化。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220110102926450.png"  ><span class="image-caption">image-20220110102926450</span></p>
<p>同样，列表初始化还可以用于单值变量</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220110103038155.png"  ><span class="image-caption">image-20220110103038155</span></p>
<h4 id="2-new失败时"><a href="#2-new失败时" class="headerlink" title="2. new失败时"></a>2. new失败时</h4><p>现在申请不到需要的内存量会引发异常std::bad_alloc。</p>
<h4 id="3-new-运算符、函数和替换函数"><a href="#3-new-运算符、函数和替换函数" class="headerlink" title="3. new: 运算符、函数和替换函数"></a>3. new: 运算符、函数和替换函数</h4><h4 id="4-定位运算符"><a href="#4-定位运算符" class="headerlink" title="4. 定位运算符"></a>4. 定位运算符</h4><p>定位new运算符可以指定要使用的位置。需要包含头文件new，下面是一个使用的例子。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220115203835156.png"  ><span class="image-caption">image-20220115203835156</span></p>
<h4 id="5-程序说明"><a href="#5-程序说明" class="headerlink" title="5. 程序说明"></a>5. 程序说明</h4><h4 id="6-定位new的其他形式"><a href="#6-定位new的其他形式" class="headerlink" title="6. 定位new的其他形式"></a>6. 定位new的其他形式</h4><p>定位new函数不可替换，但可重载。它至少需要接收两个参数，其中第一个总是std::size_t，指定了请求的字节数。这样的重载函数都被称为定义new，即使额外的参数没有指定位置。</p>
<h2 id="9-3-名称空间"><a href="#9-3-名称空间" class="headerlink" title="9.3 名称空间"></a>9.3 名称空间</h2><h3 id="9-3-1-传统的C-名称空间"><a href="#9-3-1-传统的C-名称空间" class="headerlink" title="9.3.1 传统的C++名称空间"></a>9.3.1 传统的C++名称空间</h3><h3 id="9-3-2-新的名称空间特性"><a href="#9-3-2-新的名称空间特性" class="headerlink" title="9.3.2 新的名称空间特性"></a>9.3.2 新的名称空间特性</h3><p>可以通过关键字namespace创建新的声明区，下面是个例子：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220115211033280.png"  ><span class="image-caption">image-20220115211033280</span></p>
<p>名称空间可以是全局的，也可以位于另一个名称空间中，但不能位于代码块中。因此，默认情况下，在名称空间中声明的名称的链接性为外部的（除非它引用了常量）。</p>
<p>可以使用下面语句将一个名称加到已有的名称列表中</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220115212445447.png"  ><span class="image-caption">image-20220115212445447</span></p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/img/image-20220115212536510.png"  ><span class="image-caption">image-20220115212536510</span></p>
<h4 id="1-using声明和using编译指令"><a href="#1-using声明和using编译指令" class="headerlink" title="1. using声明和using编译指令"></a>1. using声明和using编译指令</h4><p>using声明使特定的标识符可用，using编译指令使整个名称空间可用。</p>
<h4 id="2-using编译指令和using声明之比较"><a href="#2-using编译指令和using声明之比较" class="headerlink" title="2. using编译指令和using声明之比较"></a>2. using编译指令和using声明之比较</h4><h4 id="3-名称空间的其他特性"><a href="#3-名称空间的其他特性" class="headerlink" title="3. 名称空间的其他特性"></a>3. 名称空间的其他特性</h4><p>讲了嵌套，传递性等特性</p>
<h4 id="4-未命名的名称空间"><a href="#4-未命名的名称空间" class="headerlink" title="4. 未命名的名称空间"></a>4. 未命名的名称空间</h4><p>提供了链接性为内部的静态变量的替代品</p>
<h3 id="9-3-3-名称空间示例"><a href="#9-3-3-名称空间示例" class="headerlink" title="9.3.3 名称空间示例"></a>9.3.3 名称空间示例</h3><h3 id="9-3-4-名称空间及其前途"><a href="#9-3-4-名称空间及其前途" class="headerlink" title="9.3.4 名称空间及其前途"></a>9.3.4 名称空间及其前途</h3>]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2021/12/20/Lab1%20Booting%20a%20PC/</url>
    <content><![CDATA[<h1 id="Lab-1-Booting-a-PC"><a href="#Lab-1-Booting-a-PC" class="headerlink" title="Lab 1: Booting a PC"></a>Lab 1: Booting a PC</h1><p>实验一主要分为三个部分，第一部分主要是熟悉x86汇编语言，QEMU x86模拟器以及电脑的开机引导程序；第二部分用于检测我们6.828内核的引导加载程序；最后在第三部分我们会深入探究6.828内核的初始模板，JOS。</p>
<p>我们可以使用make grade指令来测试我们的解决方案。</p>
<h2 id="Part-1-PC-Bootstrap"><a href="#Part-1-PC-Bootstrap" class="headerlink" title="Part 1: PC Bootstrap"></a>Part 1: PC Bootstrap</h2><p>这一部分主要介绍了x86汇编语言以及PC的开机引导程序，并学者开始使用QEMU及其调试工具。</p>
<h3 id="Simulating-the-x86"><a href="#Simulating-the-x86" class="headerlink" title="Simulating the x86"></a>Simulating the x86</h3><p>我们将使用QEMU模拟器，并在其上开发我们的操作系统，而不是在一个真实的物理机上面去调试我们的代码。</p>
<p>我们在lab目录下执行make指令就可以构建一个最小的6.828开机引导程序和内核。</p>
<p>在编译完成我们的引导程序和内核之后，我们就可以运行QEMU了，如下图。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211211084946927.png"  ><span class="image-caption">image-20211211084946927</span></p>
<h3 id="The-PC’s-Physical-Address-Space"><a href="#The-PC’s-Physical-Address-Space" class="headerlink" title="The PC’s Physical Address Space"></a>The PC’s Physical Address Space</h3><p>早期内存空间只有1MB的大小。内存空间的开始部分被记作“Low Memory”，是一块（RAM）。“Low Memory”后面紧跟着一片为硬件预留的空间（例如媒体显存和NVM固件）。预留空间中最重要的部分就是BIOS，负责执行基础的系统初始化工作，例如激活video card并检查安装的内存容量。初始化工作完成后，BIOS从软盘、硬盘、CD-ROM或网络等适当位置加载操作系统，并将机器的控制权交给操作系统。</p>
<p>之后Intel将内存空间做的越来越大，但PC架构仍然保留了之前的1MB的低地址空间的布局，以保证与现有软件向后兼容。</p>
<h3 id="The-ROM-BIOS"><a href="#The-ROM-BIOS" class="headerlink" title="The ROM BIOS"></a>The ROM BIOS</h3><p>在这一部分实验中，我们将使用QEMU的调试工具来研究IA-32兼容的计算机如何启动。</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211211095552785.png"  ><span class="image-caption">image-20211211095552785</span></p>
<p>[f000:fff0] 0xffff0: ljmp $0xf000,$0xe05b</p>
<p>从上述第一条指令，我们可以得出：</p>
<ul>
<li>IBM PC 在物理地址 0x000ffff0 处开始执行，该地址位于为 ROM BIOS 保留的 64KB 区域的最顶部</li>
<li>PC 以 CS = 0xf000 和 IP = 0xfff0 开始执行，其中CS是代码段寄存器，IP是指令指针寄存器（相当于偏移地址）</li>
<li>第一条被执行的指令是jmp指令，代码跳转到CS=0xf000,IP=0xe05b</li>
</ul>
<h3 id="Exercise-2"><a href="#Exercise-2" class="headerlink" title="Exercise 2:"></a>Exercise 2:</h3><p>逐条分析BIOS内部指令，探究BIOS所作的工作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 0xffff0:  ljmp $0xf000, $0xe05b </span><br></pre></td></tr></table></figure>

<p>这是一条跳转指令，将代码切换到0xfe05b处执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2. [f000:e05b]0xfe05b: cmpl $0x0, $cs:0x6ac8</span><br></pre></td></tr></table></figure>

<p>把立即数0x0和$cs:0x6ac8所表示的内存地址处存放的值进行比较</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3. 0xfe062:  jne  0xfd2e1</span><br></pre></td></tr></table></figure>

<p>jne指令：如果ZF标志位为0，则跳转，否则顺序执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4. 0xfe066:  xor  %dx, %dx</span><br></pre></td></tr></table></figure>

<p>可以看到该指令的地址是0xfe066，说明上条指令并未跳转，该指令将dx寄存器清零。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5. 0xfe068:  mov  %dx %ss</span><br><span class="line">6. 0xfe06a:  mov  $0x7000, %esp</span><br><span class="line">7. 0xfe070:  mov  $0xf34d2, %edx</span><br><span class="line">8. 0xfe076:  jmp  0xfd15c</span><br><span class="line">9. 0xfd15c:  mov  %eax, %ecx</span><br></pre></td></tr></table></figure>

<p>上述指令用来设置一系列寄存器的值，具体目的不明。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10. 0xfd15f:  cli</span><br></pre></td></tr></table></figure>

<p>这条指令是<em><strong>关闭中断指令</strong></em>，因为启动时的操作都很关键，不能被其他事件中断，关闭中断指令可以屏蔽那些可以屏蔽的中断，比如大部分的硬件中断。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">11. 0xfd160:  cld</span><br></pre></td></tr></table></figure>

<p><em><strong>串操作复位指令</strong></em>，将方向标志位DF置为0，每进行一次串操作，操作数地址+1、+2、+4（分别对应字节、字、双字操作数）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">12. 0xfd161:  mov  $0x8f, %eax</span><br><span class="line">13. 0xfd167:  out  %al, $0x70</span><br><span class="line">14. 0xfd169:  in  $0x71, %al</span><br></pre></td></tr></table></figure>

<p> 这三个操作中涉及到两个新的指令out, in。这两个操作是用于操作IO端口的。这种IO端口的操作我们后面会经常接触到，这里大致说下。</p>
<p>　 CPU与外部设备通讯时，通常是通过访问，修改设备控制器中的寄存器来实现的。那么这些位于设备控制器当中的寄存器也叫做<strong>IO端口</strong>。为了方便管理，80x86CPU采用IO端口单独编址的方式，即所有设备的端口都被命名到一个IO端口地址空间中。这个空间是独立于内存地址空间的。所以必须采用和访问内存的指令不一样的指令来访问端口。</p>
<p>所以这里引入in，out操作：</p>
<p>　    **in %al, PortAddress   把端口地址为PortAddress的端口中的值读入寄存器al中 **</p>
<p>　   <strong>out PortAddres,%al   向端口地址为PortAddress的端口写入值，值为al寄存器中的值</strong></p>
<p>标准规定端口操作必须要用al寄存器作为缓冲。</p>
<p>那么这三条命令就是要操作端口0x70，0x71，它们对应的是什么设备呢？根据下面的链接中所提供的清单（这个连接之后会经常用到，建议大家收藏）：<a href="http://bochs.sourceforge.net/techspec/PORTS.LST">http://bochs.sourceforge.net/techspec/PORTS.LST</a></p>
<p>　 我们知道了，0x70端口和0x71端口是用于控制系统中一个叫做CMOS的设备，这个设备是一个低功耗的存储设备，它可以用于在计算机关闭时存储一些信息，它是由独立的电池供电的。这个链接有详细介绍<a href="http://wiki.osdev.org/CMOS">http://wiki.osdev.org/CMOS</a></p>
<p>　 这个CMOS中可以控制跟PC相关的多个功能，其中最重要的就是<strong>时钟设备（Real Time Clock）</strong>的 ，它还可以控制是否**响应不可屏蔽中断NMI(Non-Maskable Interrupt)**。</p>
<p>　 操作CMOS存储器中的内容需要两个端口，一个是0x70另一个就是0x71。其中0x70可以叫做索引寄存器，<strong>这个8位寄存器的最高位是不可屏蔽中断(NMI)使能位。如果你把这个位置1，则NMI不会被响应。低7位用于指定CMOS存储器中的存储单元地址</strong>，所以如果你想访问第1号存储单元，并且在访问时，我要使能NMI，那么你就应该向端口0x70里面送入0b10000001 = 0x81。</p>
<p>　 即mov $0x81, %al</p>
<p>​         out %al, 0x70</p>
<p>　  然后对于这个地址单元的操作，比如读或者写就可以由0x71端口完成，比如你现在想从1号存储单元里面读出它的值，在完成上面的两条指令后，就可以输入这条指令</p>
<p>　　in $0x71, %al </p>
<p>　　再回到我们的系统，这三条指令可以看出，它首先关闭了NMI中断，并且要访问存储单元0xF的值，并且把值读到al中，但是在后面我们发现这个值并没有被利用，所以可以认为<strong>这三条指令是用来关闭NMI中断的。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">15. 0xfd16b:  in  $0x92, %al</span><br><span class="line">16. 0xfd16d:  or  $0x2, %al</span><br><span class="line">17. 0xfd16f:  out  %al, $0x92</span><br></pre></td></tr></table></figure>

<p>这三步操作又是在控制端口，此时被控制的端口号为0x92，通过上面那个链接 <a href="http://bochs.sourceforge.net/techspec/PORTS.LST">http://bochs.sourceforge.net/techspec/PORTS.LST</a></p>
<p>　　我们可以查看到，它控制的是 PS/2系统控制端口A，而第16，17步的操作明显是在把这个端口的1号bit置为1。这个端口的bit1的功能是</p>
<p>　　　　bit 1= 1 indicates A20 active</p>
<p>　　 即A20位，即第21个地址线被使能，了解实模式和保护模式的同学肯定清楚，如果A20地址线被激活，那么系统工作在保护模式下。但是在之后的boot loader程序中，计算机首先要工作在实模式下啊。所以这里的这个操作应该是去测试可用内存空间。在boot loader之前，它肯定还会转换回实模式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">18. 0xfd171:  lidtw  %cs:0x6ab8</span><br></pre></td></tr></table></figure>

<p><em><strong>lidt指令</strong></em>：加载中断向量表寄存器(IDTR)。这个指令会把从地址0xf6ab8起始的后面6个字节的数据读入到中断向量表寄存器(IDTR)中。中断是操作系统中非常重要的一部分，有了中断操作系统才能真正实现进程。每一种中断都有自己对应的中断处理程序，那么这个中断的处理程序的首地址就叫做这个中断的中断向量。中断向量表自然是存放所有中断向量的表了。关于中断向量表的介绍，大家可以戳这个链接 <a href="http://wiki.osdev.org/Interrupt_Descriptor_Table">http://wiki.osdev.org/Interrupt_Descriptor_Table</a> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">19. 0xfd177:  lgdtw  %cs:0x6a74 </span><br></pre></td></tr></table></figure>

<p>把从0xf6a74为起始地址处的6个字节的值加载到全局描述符表格寄存器中GDTR中。这个表实现保护模式非常重要的一部分，我们在介绍boot loader时会具体介绍它。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">20. 0xfd17d:  mov  %cr0, %eax</span><br><span class="line">21. 0xfd180:  or  $0x1, %eax</span><br><span class="line">22. 0xfd184:  mov  %eax, %cr0</span><br></pre></td></tr></table></figure>

<p>计算机中包含CR0~CR3四个控制寄存器，用来控制和确定处理器的操作模式。其中这三个语句的操作明显是要把CR0寄存器的最低位(0bit)置1。CR0寄存器的0bit是PE位，启动保护位，当该位被置1，代表开启了保护模式。但是这里出现了问题，我们刚刚说过BIOS是工作在实模式之下，后面的boot loader开始的时候也是工作在实模式下，所以这里把它切换为保护模式，显然是自相矛盾。所以只能推测它在检测是否机器能工作在保护模式下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">23. 0xfd187:  ljmpl  $0x8, $0xfd18f</span><br><span class="line">24. 0xfd18f:   mov  $0x10, %eax</span><br><span class="line">25. 0xfd194:  mov  %eax, %ds</span><br><span class="line">26. 0xfd196:  mov  %eax, %es</span><br><span class="line">27. 0xfd198:  mov  %eax, %ss</span><br><span class="line">28. 0xfd19a:  mov  %eax, %fs</span><br><span class="line">29. 0xfd19c:  mov  %eax, %gs</span><br></pre></td></tr></table></figure>

<p>修改这些寄存器的值。这些寄存器都是段寄存器。大家可以戳这个链接看一下具体介绍 <a href="http://www.eecg.toronto.edu/~amza/[www.mindsec.com/files/x86regs.html](http://www.mindsec.com/files/x86regs.html)">http://www.eecg.toronto.edu/~amza/[www.mindsec.com/files/x86regs.html](http://www.mindsec.com/files/x86regs.html)</a></p>
<p>　　 这里的23~29步之所以这么做是按照规定来的，<a href="https://en.wikibooks.org/wiki/X86_Assembly/Global_Descriptor_Table%E9%93%BE%E6%8E%A5%E4%B8%AD%E6%8C%87%E5%87%BA%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%88%9A%E5%88%9A%E5%8A%A0%E8%BD%BD%E5%AE%8CGDTR%E5%AF%84%E5%AD%98%E5%99%A8%E6%88%91%E4%BB%AC%E5%BF%85%E9%A1%BB%E8%A6%81%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BD%E6%89%80%E6%9C%89%E7%9A%84%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E5%80%BC%EF%BC%8C%E8%80%8C%E5%85%B6%E4%B8%ADCS%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%BF%85%E9%A1%BB%E9%80%9A%E8%BF%87%E9%95%BF%E8%B7%B3%E8%BD%AC%E6%8C%87%E4%BB%A4%EF%BC%8C%E5%8D%B323%E5%8F%B7%E6%8C%87%E4%BB%A4%E6%9D%A5%E8%BF%9B%E8%A1%8C%E5%8A%A0%E8%BD%BD%E3%80%82%E6%89%80%E4%BB%A5%E8%BF%99%E4%BA%9B%E6%AD%A5%E9%AA%A4%E6%98%AF%E5%9C%A8%E7%AC%AC19%E6%AD%A5%E5%AE%8C%E6%88%90%E5%90%8E%E5%BF%85%E9%A1%BB%E8%A6%81%E5%81%9A%E7%9A%84%E3%80%82%E8%BF%99%E6%A0%B7%E6%89%8D%E8%83%BD%E6%98%AFGDTR%E7%9A%84%E5%80%BC%E7%94%9F%E6%95%88%E3%80%82">https://en.wikibooks.org/wiki/X86_Assembly/Global_Descriptor_Table链接中指出，如果刚刚加载完GDTR寄存器我们必须要重新加载所有的段寄存器的值，而其中CS段寄存器必须通过长跳转指令，即23号指令来进行加载。所以这些步骤是在第19步完成后必须要做的。这样才能是GDTR的值生效。</a></p>
<p>综上，我们可以看到BIOS的操作就是在控制，初始化，检测各种底层的设备，比如时钟，GDTR寄存器。以及设置中断向量表。这都和Lab 1 Part 1.2最后两段说的一样。但是作为PC启动后运行的第一段程序，<strong>它最重要的功能是把操作系统从磁盘中导入内存，然后再把控制权转交给操作系统。</strong>所以BIOS在运行的最后会去检测可以从当前系统的哪个设备中找到操作系统，通常来说是我们的磁盘。也有可能是U盘等等。当BIOS确定了，操作系统位于磁盘中，那么它就会把这个磁盘的第一个扇区，通常把它叫做启动区（boot sector）先加载到内存中，这个启动区中包括一个非常重要的程序–<strong>boot loader，</strong>它会负责完成整个操作系统从磁盘导入内存的工作，以及一些其他的非常重要的配置工作。最后操作系统才会开始运行。</p>
<p>　　可见PC启动后的运行顺序为 BIOS –&gt; boot loader –&gt; 操作系统内核</p>
<h2 id="Part-2-The-Boot-Loader"><a href="#Part-2-The-Boot-Loader" class="headerlink" title="Part 2: The Boot Loader"></a>Part 2: The Boot Loader</h2><p>这一部分说是让你逐行分析汇编源码，但我认为作为学习者，不用一上来就试图把所有见到的源码和术语全部搞到，这样往往容易使眼光局限在细节处，而失去了全局观。</p>
<h3 id="Exercise-3"><a href="#Exercise-3" class="headerlink" title="Exercise 3"></a>Exercise 3</h3><ul>
<li><p>At what point does the processor start executing 32-bit code? What exactly causes the switch from 16- to 32-bit mode?{处理器从何时开始执行32位代码？究竟是什么导致了从16位模式到32位模式的转换?）<br>答：在ljmp $PROT_MODE_CSEG, $protcseg（截图三中间）处开始执行32位代码。应该是经过64与60端口的控制，加载完GDT表后，CRO的bit0位为1，此时机器已处于保护模式，故处理器从16位模式转为32位模式。</p>
</li>
<li><p>What is the last instruction of the boot loader executed, and what is the first instruction of the kernel it just loaded?（引导加载程序执行的最后一条指令是什么?它刚刚加载完的内核的第一条指令是什么?）<br>答：引导加载程序的最后一条指令是boot/main.c中bootmain函数最后的((void (*)(void)) (ELFHDR-&gt;e_entry))(); 这个第一条指令位于/kern/entry.S文件中，第一句 movw $0x1234, 0x472</p>
</li>
<li><p>Where is the first instruction of the kernel?（内核的第一条指令在哪里?）<br>答：位于/kern/entry.S文件中</p>
</li>
<li><p>How does the boot loader decide how many sectors it must read in order to fetch the entire kernel from disk? Where does it find this information?（引导加载程序如何决定必须读取多少扇区才能从磁盘获取整个内核?它在哪里找到这些信息?）<br>答：通过ELF program headers决定，他在操作系统内核映像文件的ELF头部信息里找到。</p>
<h3 id="Loading-the-Kernel"><a href="#Loading-the-Kernel" class="headerlink" title="Loading the Kernel"></a>Loading the Kernel</h3><p>ELF是将二进制形式的.o文件进行组合，表示”Executable and Linkable Format”。我们只需要了解elf文件的这三个部分即可。</p>
<ul>
<li><p><code>.text</code>: The program’s executable instructions.</p>
</li>
<li><p><code>.rodata</code>: Read-only data, such as ASCII string constants produced by the C compiler. (We will not bother setting up the hardware to prohibit writing, however.)</p>
</li>
<li><p><code>.data</code>: The data section holds the program’s initialized data, such as global variables declared with initializers like <code>int x = 5;</code>.</p>
</li>
</ul>
</li>
</ul>
<h2 id="Part-3：-The-Kernel"><a href="#Part-3：-The-Kernel" class="headerlink" title="Part 3： The Kernel"></a>Part 3： The Kernel</h2><p>这里主要介绍了Kernel中虚拟地址到物理地址的映射机制，并设置了Exercise 7来探究如果虚拟地址映射失效后，代码的出错现象。实验相对来说比较简单，这里不再赘述</p>
<h3 id="Exercise8"><a href="#Exercise8" class="headerlink" title="Exercise8"></a>Exercise8</h3><p>如图所示：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211214172950353.png"  ><span class="image-caption">image-20211214172950353</span></p>
<h3 id="The-Stack"><a href="#The-Stack" class="headerlink" title="The Stack"></a>The Stack</h3><h3 id="Exercise-9"><a href="#Exercise-9" class="headerlink" title="Exercise 9"></a>Exercise 9</h3><p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211214173357817.png"  ><span class="image-caption">image-20211214173357817</span></p>
<p>可以看到movl指令将栈顶地址赋给esp寄存器，在下面的.data数据段中，从标签bootstack开始，使用.space指令为栈分配了KSTKSIZE大小的空间。由于栈是向低空间生长的，所以初始时栈顶位于bootstacktop处，朝bootstack方向压入数据。</p>
<h3 id="Exercise11"><a href="#Exercise11" class="headerlink" title="Exercise11"></a>Exercise11</h3><p>这部分联系要求我们实现类似于gdb中的调试命令backtrace(bt)。</p>
<p>题目要求打印调用栈的信息，包括ebp和eip寄存器的值、输入参数的值等。</p>
<ol>
<li><p>按照提示，我们首先可以调用read_ebp函数来获取当前ebp寄存器的值。ebp寄存器的值实际上是一个指针，指向当前函数的栈帧的底部（而esp寄存器指向当前函数的栈顶）。我们可以把整个调用栈看做一个数组，其中每个元素均为4字节的整数，并以ebp指针的值为数组起始地址，那么ebp[1]存储的就是函数返回地址，也就是题目中要求的eip的值，ebp[2]以后存储的是输入参数的值。由于题目要求打印5个输入参数，因此需要获取ebp[2]～ebp[6]的值。这样第一条栈信息便可打印出来。</p>
</li>
<li><p>那么怎么打印下一条栈信息呢？还得从ebp入手。当前ebp指针存储的恰好是调用者的ebp寄存器的值，因此当前ebp指针又可以看做是一个链表头，我们通过链表头就可以遍历整个链表。举个例子：假设有A、B、C三个函数，A调用B，B调用C，每个函数都对应有一个栈帧，栈帧的底部地址均存储在当时的ebp寄存器中，不妨记为a_ebp, b_ebp和c_ebp，那么将有c_ebp -&gt; b_ebp -&gt; a_ebp，用程序语言表示就是：<code>a_ebp = (uint32_t *)*b_ebp</code>和<code>b_ebp = (uint32_t *)*c_ebp</code>。</p>
</li>
<li><p>还有一个问题：怎么知道遍历何时结束呢？题目中提示可以参考<code>kern/entry.S</code>，于是我打开此文件，果然找到了答案：内核初始化时会将ebp设置为0，因此当我们检查到ebp为0后就应该结束了。</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Clear the frame pointer register (EBP)</span><br><span class="line"># so that once we get into debugging C code,</span><br><span class="line"># stack backtraces will be terminated properly.</span><br><span class="line">movl	$0x0,%ebp			# nuke frame pointer</span><br></pre></td></tr></table></figure>



<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>这道练习题主要考察我们对函数调用过程中，栈的行为的理解。当要调用一个函数时，栈首先压入函数执行所需的参数，然后压入返回地址，最后压入调用者栈帧的ebp值，然后将esp的值赋给ebp。</p>
<h3 id="Exercise12"><a href="#Exercise12" class="headerlink" title="Exercise12"></a>Exercise12</h3><p>进一步为backtrace添加命令地址所在文件名，行号，函数名的功能。</p>
<p>问题1：_ _ STAB_ *来自什么地方？</p>
<p>根据讲义中的提示，我们去查看kern/kern.ld文件，可以看到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.stab : &#123;</span><br><span class="line">	PROVIDE(__STAB_BEGIN__ = .);</span><br><span class="line">	*(.stab);</span><br><span class="line">	PROVIDE(__STAB_END__ = .);</span><br><span class="line">	BYTE(0)		/* Force the linker to allocate space</span><br><span class="line">			   for this section */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.stabstr : &#123;</span><br><span class="line">	PROVIDE(__STABSTR_BEGIN__ = .);</span><br><span class="line">	*(.stabstr);</span><br><span class="line">	PROVIDE(__STABSTR_END__ = .);</span><br><span class="line">	BYTE(0)		/* Force the linker to allocate space</span><br><span class="line">			   for this section */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>__STAB_BEGIN_, __STAB_END_, __STABSTR_BEGIN_, _ _STABSTR_ 分别代表.stab和.stabstr这两个段开始和结束的地址。</p>
<p>问题2：确定符号表是否加载到内存中？</p>
<p>执行objdump -h obj/kern/kernel</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211215201925065.png"  ><span class="image-caption">image-20211215201925065</span></p>
<p>输入指令objdump -G obj/kern/kernel，可以看到所有的stab的信息</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211215202728390.png"  ><span class="image-caption">image-20211215202728390</span></p>
<p>可以看到.stabstr加载地址为0xf0105dfd</p>
<p>输入指令x/8s 0xf0105dfd</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211215202537592.png"  ><span class="image-caption">image-20211215202537592</span></p>
<p>与上图对照，发现符号表已经被加载到了0xf0105dfd开始的地址空间中了。</p>
<p>在backtrace函数中加入显示指令所在文件名，在文件中的行数，指令所在函数名，指令在函数中的偏移等信息。</p>
<p>仔细阅读kern/kdebug.c中的debuginfo_eip函数，会发现代码是按照文件、函数、具体行号的顺序来查找指令位置的。前两步（文件、函数）已经帮我们定位好，我们只需要在指定的函数中找到目标指令即可，相关代码如下：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211216182920955.png"  ><span class="image-caption">image-20211216182920955</span></p>
<p>至此，我们利用补充后的debuginfo_eip函数可以完成mon_backtrace函数，代码如下：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211216183056270.png"  ><span class="image-caption">image-20211216183056270</span></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/12/20/HW%20shell/</url>
    <content><![CDATA[<h1 id="HW-shell"><a href="#HW-shell" class="headerlink" title="HW: shell"></a>HW: shell</h1><p>这一个作业要求我们写一个简单版的shell程序，可以识别简单的命令行指令。读了xv6相关的源码之后，实现思路豁然开朗。</p>
<h2 id="实现简单指令"><a href="#实现简单指令" class="headerlink" title="实现简单指令"></a>实现简单指令</h2><p>要求我们自己编写的shell程序能够实现例如ls之类的简单命令。参照xv6中简单指令的实现：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211220102214118.png"  ><span class="image-caption">image-20211220102214118</span></p>
<p>可以看到，利用exev函数可以执行指定的可执行文件，而shell命令ls等都有自己对应的可执行文件，这些shell命令的可执行文件位于/bin/和/usr/bin两个文件夹中，所以使命令行直接执行ls命令，需要在程序中补全完整执行路径。</p>
<p>我自己的实现代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">strstr</span>(ecmd-&gt;argv[<span class="number">0</span>], <span class="string">&quot;/bin/&quot;</span>) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">  <span class="keyword">char</span> *result = <span class="built_in">malloc</span>(<span class="number">5</span> + <span class="built_in">strlen</span>(ecmd-&gt;argv[<span class="number">0</span>]) + <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(result, <span class="string">&quot;/bin/&quot;</span>);</span><br><span class="line">  <span class="built_in">strcat</span>(result, ecmd-&gt;argv[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">free</span>(ecmd-&gt;argv[<span class="number">0</span>]);</span><br><span class="line">  ecmd-&gt;argv[<span class="number">0</span>] = result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(execv(ecmd-&gt;argv[<span class="number">0</span>], ecmd-&gt;argv) == <span class="number">-1</span>) &#123;</span><br><span class="line">  <span class="keyword">char</span> *result = <span class="built_in">malloc</span>(<span class="number">4</span> + <span class="built_in">strlen</span>(ecmd-&gt;argv[<span class="number">0</span>]) + <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(result, <span class="string">&quot;/usr&quot;</span>);</span><br><span class="line">  <span class="built_in">strcat</span>(result, ecmd-&gt;argv[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">free</span>(ecmd-&gt;argv[<span class="number">0</span>]);</span><br><span class="line">  ecmd-&gt;argv[<span class="number">0</span>] = result;</span><br><span class="line">  <span class="keyword">if</span>(execv(ecmd-&gt;argv[<span class="number">0</span>], ecmd-&gt;argv) == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;exec %s failed\n&quot;</span>, ecmd-&gt;argv[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="I-O重定向"><a href="#I-O重定向" class="headerlink" title="I/O重定向"></a>I/O重定向</h2><p>默认情况下程序从标准输入中读取数据，并将输出写入到标准输出中，但通过重定向命令可以重新定向程序的输入和输出。我们先看一下xv6中重定向命令的实现代码：</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211220103207119.png"  ><span class="image-caption">image-20211220103207119</span></p>
<p>close(rcmd-&gt;fd)先将fd与标准输入和标准输出解绑，然后将fd与指定文件rcmd-&gt;file重新绑定，以实现重定向目的。我的实现代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">close(rcmd-&gt;fd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(open(rcmd-&gt;file, rcmd-&gt;flags, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;open %s failed\n&quot;</span>, rcmd-&gt;file);</span><br><span class="line">  _exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">runcmd(rcmd-&gt;cmd);</span><br></pre></td></tr></table></figure>

<p>注意，open函数一定要指定mode参数，即open函数的第三个参数，因为创建新文件的时候一定要指定之后用户对该文件的操作权限，如果不指定这个参数，创建了文件之后，下次涉及该文件的操作都没有合法权限。</p>
<h2 id="管道命令的实现"><a href="#管道命令的实现" class="headerlink" title="管道命令的实现"></a>管道命令的实现</h2><p>通过这个作业，我也是比较透彻的理解了这个强大的功能。我们可以把管道想成是两个程序（进程）之间的单向通道。如命令ls | sort，ls程序将自己的输出通过管道输出到管道写端口中，sort程序从管道另一端的读端口读取数据。我们先看一下xv6中管道命令的实现</p>
<p><img  src="https://gitee.com/yu-zewen1226/upload-image/raw/master/image-20211220105052699.png"  ><span class="image-caption">image-20211220105052699</span></p>
<p>注意，这里每个线程执行了close(p[0]])和close(p[1])这是因为管道的读是阻塞的，read操作会一直等待，直到管道有了新数据或者绑定到管道写端口的描述符都已经关闭。如果不执行close(p[0])操作，就会始终有描述符绑定在管道的写端口，导致read永远结束不了。下面是我的实现代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(pipe(p) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pipe&quot;</span>);</span><br><span class="line">  _exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(fork() == <span class="number">0</span>) &#123;</span><br><span class="line">  close(<span class="number">1</span>);</span><br><span class="line">  dup(p[<span class="number">1</span>]);</span><br><span class="line">  close(p[<span class="number">0</span>]);</span><br><span class="line">  close(p[<span class="number">1</span>]);</span><br><span class="line">  runcmd(pcmd-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(fork() == <span class="number">0</span>) &#123;</span><br><span class="line">  close(<span class="number">0</span>);</span><br><span class="line">  dup(p[<span class="number">0</span>]);</span><br><span class="line">  close(p[<span class="number">0</span>]);</span><br><span class="line">  close(p[<span class="number">1</span>]);</span><br><span class="line">  runcmd(pcmd-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> wstatus = <span class="number">0</span>;</span><br><span class="line">close(p[<span class="number">0</span>]);</span><br><span class="line">close(p[<span class="number">1</span>]);</span><br><span class="line">wait(&amp;wstatus);</span><br><span class="line">wait(&amp;wstatus);</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>test_my_site</title>
    <url>/2021/12/12/test-my-site/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
